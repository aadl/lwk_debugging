<?php

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Symfony\Component\HttpFoundation\RedirectResponse;
use \Drupal\node\Entity\Node;
/*
 * Debugging routine to log to the <root folder>/LWKLWK.log IN arborcat.module
 */
function dblog(...$things_to_log) {

  $config = \Drupal::config('lwk_debugging.settings');
  $max_num_chars = $config->get('max_num_chars');
  $logging_filename = $config->get('logging_filename');
  $line_to_log = '';
  foreach ($things_to_log as $item) {
    $encoded_str = json_encode($item);
    if (strlen($encoded_str) + strlen($line_to_log) <= $max_num_chars) {
      $print_r_line = print_r($item, TRUE);
      $line_to_log = (strlen($encoded_str) < $max_num_chars) ? $line_to_log . ' ' . $print_r_line : 'TOO BIG - ' . strlen($encoded_str) . ' chars';
    }
    else {
      $line_to_log = '+++ OBJECT TOO LARGE TO LOG COMPLETELY +++, first ' . $max_num_chars . ' chars: ' . substr($encoded_str, 0, $max_num_chars) . '+++ END +++';
    }
  }
  // prepend date/time onto log line
  $now_date_time = new DrupalDateTime();
  $date_time_string = (string) $now_date_time->format('Y-m-d H:i:s');
  $caller = debug_backtrace(DEBUG_BACKTRACE_IGNORE_ARGS, 2)[1]['function'];
  $complete_line = '[' . $date_time_string . '] [[' . $caller . ']]:'. $line_to_log . "\n";
  error_log($complete_line, 3, $logging_filename);
}

function dbje($obj) {
  return json_encode($obj, JSON_PRETTY_PRINT);
}
