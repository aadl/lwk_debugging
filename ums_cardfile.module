<?php

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Url;
use Drupal\Core\Link;
// $Id$
// UMS cardfile module will provide for adding, editing and querying of records into the UMS card file

/**
 * Display help and module information
 * @return help text for section
 */
function ums_cardfile_help($path, $arg) {
  $output = '';

  switch ($path) {
  case "admin/help#ums_cardfile":
    $output = '<p>' .  t("UMS Card File CRUD Interface") . '</p>';

    break;
  }

  return $output;
}


/**
 * Valid permissions for UMS modules
 * @return array of valid permissions
 * need to change all permissions to a UMS only role
 */
function ums_cardfile_perm() {
  return array('edit ums card file records', 'view ums card file records' );
}


/**
 * Implements hook_theme().
 *
 * Register a module or theme's theme implementations.
 * The implementations declared by this hook specify how a particular render array is to be rendered as HTML.
 *
 * See: https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme/8.2.x
 *
 * If you change this method, clear theme registry and routing table 'drush cc theme-registry' and 'drush cc router'.
 */
function ums_cardfile_theme($existing, $type, $theme, $path) {
  return [
    'ums-cardfile-home' => [
      'variables' => [
      ]
    ],
    'ums-cardfile-artists' => [
      'variables' => [
        'artists' => NULL,
        'pager' => NULL,
        'filter' => NULL,
        'base_url' => $GLOBALS['base_url']
      ]
    ],
    'ums-cardfile-artist' => [
      'variables' => [
        'artist' => NULL,
      ]
    ],
    'ums-cardfile-merge-artists' => [
      'variables' => [
        'merge_data' => NULL,
      ]
    ],
    'ums-cardfile-venues' => [
      'variables' => [
        'venues' => NULL,
        'venue_add_form' => NULL,
      ]
    ],
    'ums-cardfile-venue' => [
      'variables' => [
        'venue' => NULL,
      ]
    ],
    'ums-cardfile-events' => [
      'variables' => [
        'year' => NULL,
        'rows' => NULL,
      ]
    ],
    'ums-cardfile-event' => [
      'variables' => [
        'event' => NULL,
        'event_add_performance_form' => NULL,
      ]
    ],

    'ums-cardfile-series' => [
      'variables' => [
        'series' => NULL,
        'series_add_form' => NULL,
      ]
    ],

    'ums-cardfile-works' => [
      'variables' => [
        'works' => NULL,
        'pager' => NULL,
        'filter' => NULL,
        'base_url' => $GLOBALS['base_url']     ]
    ],
    'ums-cardfile-work' => [
      'variables' => [
        'work' => NULL,
        'work_add_artist_form' => NULL,
      ]
    ],
    'ums-cardfile-searchadd' => [
      'variables' => [
        'heading_text' => NULL,
      ]
    ],
  ];
}


// DRUPAL 8 MIGRATION NEW METHODS
  /*
* Debugging routine to log to the <root folder>/LWKLWK.log IN arborcat.module
*/
function dblog(...$things_to_log) {
  $line_to_log = '';
  foreach ($things_to_log as $item) {
    $line_to_log = $line_to_log . ' ' . print_r($item, TRUE);
  }
  // prepend date/time onto log line
  $now_date_time = new DrupalDateTime();
  $date_time_string = (string) $now_date_time->format('Y-m-d H:i:s');
  $complete_line = '[' . $date_time_string . '] ' . $line_to_log . "\n";
  error_log($complete_line, 3, "LWKLWK.log");
}

function ums_cardfile_create_link($link_text, $url) {
  dblog('ums_cardfile_create_link entered, link_text. url =', $link_text, $url);
  $url = Url::fromUri('internal:/' . $url);
  $project_link = Link::fromTextAndUrl(t($link_text), $url);
  return $project_link->toString();
}

function ums_cardfile_save($table_name, $fields_array, $field_key) {
  $db = \Drupal::database();

  $keyValue = NULL;
  if ($field_key && $fields_array[$field_key]) {
    $keyValue = $fields_array[$field_key];
    unset($fields_array[$field_key]);
    $db->update($table_name)->fields($fields_array)->condition($field_key, $keyValue)->execute();
  }
  else {
    dblog('ums_cardfile_save: INSERT', $table_name, $fields_array);
    $pid = $db->insert($table_name)->fields($fields_array)->execute();
    dblog('ums_cardfile_save: AFTER INSERT', $pid);
  }
}

function ums_cardfile_drupal_goto($path, $options = []) {
  $url = Url::fromRoute($path, $options);
  dblog('ums_cardfile_drupal_goto: url=', $url->toString());

  return $url;
}

/*== ARTISTS =================================================================*/

function _ums_cardfile_get_artist($aid = 0) {
  dblog('_ums_cardfile_get_artist: ENTERED $aid:', $aid);
  $db = \Drupal::database();
  $artist = $db->query("SELECT ums_artists.aid AS aid, " .
                                    "ums_artists.name AS name, " .
                                    "ums_artists.name_plain AS name_plain, " .
                                    "ums_artists.alias AS alias, " .
                                    "ums_artists.notes AS notes, " .
                                    "ums_artists.photo_nid AS photo_nid " .
                                    "FROM ums_artists " .
                                    "WHERE ums_artists.aid = :aid", [':aid' => $aid])->fetchAssoc();

  // Get Works
  $works = $db->query("SELECT * " .
                  "FROM ums_artist_works, ums_work_roles, ums_works " .
                  "WHERE ums_artist_works.aid = :aid " .
                  "AND ums_artist_works.wrid = ums_work_roles.wrid " .
                  "AND ums_artist_works.wid = ums_works.wid " .
                  "ORDER BY ums_works.title ASC", [':aid' => $aid])->fetchAll(PDO::FETCH_ASSOC);
  
  foreach ($works as $work) {
    $artist['works'][] = $work;
  }

  // Get Performances
  $performances = $db->query("SELECT * " .
                  "FROM ums_artist_performances, ums_performance_roles, ums_performances, ums_events " .
                  "WHERE ums_artist_performances.aid = :aid " .
                  "AND ums_artist_performances.prid = ums_performance_roles.prid " .
                  "AND ums_artist_performances.pid = ums_performances.pid " .
                  "AND ums_performances.eid = ums_events.eid " .
                  "ORDER BY ums_events.date ASC", [':aid' => $aid])->fetchAll(PDO::FETCH_ASSOC);
  
  foreach ($performances as $perf) {
    $performance = _ums_cardfile_get_performance($perf['pid']);
    $performance['role'] = $perf['name'];
    $artist['performances'][] = $performance;
  }
  // Turn photo nid into links
  if ($artist['photo_nid']) {
    foreach (explode(',', $artist['photo_nid']) as $photo_nid) {
      $artist['photos'][] = ums_cardfile_create_link('Photo', 'node/' . $photo_nid);
    }
  }
  return $artist;
}

/*== PERFORMANCES ============================================================*/

function _ums_cardfile_get_performance($pid = 0) {
  dblog('_ums_cardfile_get_performance: ENTERED $aid:', $pid);
  $db = \Drupal::database();
  $performance = $db->query("SELECT ums_performances.pid AS pid, " .
                                    "ums_performances.eid AS eid, " .
                                    "ums_performances.wid AS wid, " .
                                    "ums_performances.notes AS notes, " .
                                    "ums_performances.youtube_url AS youtube_url," .
                                    "ums_performances.weight AS weight " .
                                    "FROM ums_performances " .
                                    "WHERE ums_performances.pid = :pid", [':pid' => $pid])->fetchAssoc();

  // Get performance event & work
  $performance['event'] = _ums_cardfile_get_event($performance['eid']);
  $performance['work'] = _ums_cardfile_get_work($performance['wid']);

  // Get performance artists
  $performance['artists'] = array();
  $perf_artists = $db->query("SELECT ums_artists.aid AS aid, " .
                  "ums_artists.name AS name, " .
                  "ums_artists.alias AS alias, " .
                  "ums_performance_roles.name AS role " .
                  "FROM ums_artist_performances, ums_artists, ums_performance_roles " .
                  "WHERE ums_artist_performances.pid = :pid " .
                  "AND ums_artist_performances.aid = ums_artists.aid " .
                  "AND ums_performance_roles.prid = ums_artist_performances.prid " .
                  "ORDER BY ums_artists.name ASC", [':pid' => $pid])->fetchAll(PDO::FETCH_ASSOC);
  
  foreach ($perf_artists as $perf_artist) {
    $performance['artists'][] = $perf_artist;
  }
  return $performance;
}

/*== EVENTS ==================================================================*/

function _ums_cardfile_get_event($eid = 0) {
  dblog('_ums_cardfile_get_event: ENTERED $eid:', $eid);
  $db = \Drupal::database();
  $event = $db->query("SELECT ums_events.eid AS eid, " .
                                   "ums_events.title AS title, " .
                                   "ums_events.date AS date, " .
                                   "ums_events.notes AS notes, " .
                                   "ums_events.program_nid AS program_nid, " .
                                   "ums_events.photo_nid AS photo_nid, " .
                                   "ums_events.youtube_url AS youtube_url," .
                                   "ums_series.sid AS sid, " .
                                   "ums_series.name AS series, " .
                                   "ums_venues.vid AS vid, " .
                                   "ums_venues.name AS venue " .
                                   "FROM ums_events, ums_series, ums_venues " .
                                   "WHERE ums_events.sid = ums_series.sid " .
                                   "AND ums_events.vid = ums_venues.vid " .
                                   "AND ums_events.eid = :eid", [':eid' => $eid])->fetchAssoc();
  // Get performances
  $performances = $db->query("SELECT * FROM ums_performances, ums_works " .
                  "WHERE ums_performances.eid = :eid " .
                  "AND ums_performances.wid = ums_works.wid " .
                  "ORDER BY ums_performances.weight ASC", [':eid' => $eid])->fetchAll(PDO::FETCH_ASSOC);

  $event['performances'] = [];
  foreach ($performances as $performance) {
    $event['performances'][] = $performance;
  }

  // Turn program nid into links
  dblog('_ums_cardfile_get_event: event =',$event);
  if ($event['program_nid']) {
    foreach (explode(',', $event['program_nid']) as $program_nid) {
      $program_nid = trim($program_nid);
      if (strpos($program_nid, '#') !== FALSE) {
        $parts = explode('#', $program_nid);
        $event['programs'][] = ums_cardfile_create_link(
          'Program',
          'node/' . $parts[0],
          array('fragment' => $parts[1])
        );
      } else {
        $event['programs'][] = ums_cardfile_create_link('Program', 'node/' . $program_nid);
      }
    }
  }

  // Turn photo nid into links
  if ($event['photo_nid']) {
    foreach (explode(',', $event['photo_nid']) as $photo_nid) {
      $event['photos'][] = ums_cardfile_create_link('Photo', 'node/' . $photo_nid);
    }
  }
  dblog('_ums_cardfile_get_event: EXITING'); 
  return $event;
}

/*== WORKS ===================================================================*/

function _ums_cardfile_get_work($wid = 0) {
  dblog('_ums_cardfile_get_work: ENTERED $wid:', $wid);
  $db = \Drupal::database();
  $work = $db->query("SELECT ums_works.wid AS wid, " .
                                  "ums_works.title AS title, " .
                                  "ums_works.alternate AS alternate, " .
                                  "ums_works.notes AS notes, " .
                                  "ums_works.youtube_url AS youtube_url " .
                                  "FROM ums_works " .
                                  "WHERE ums_works.wid = :wid", [':wid' => $wid])->fetchAssoc();

  dblog('_ums_cardfile_get_work: $work:', $work);
  if ($work['wid']) {
    // Get work artists
    $work['artists'] = array();
    $work_artists = db_query("SELECT ums_artists.aid AS aid, " .
                    "ums_artists.name AS name, " .
                    "ums_artists.alias AS alias, " .
                    "ums_work_roles.name AS role " .
                    "FROM ums_artist_works, ums_artists, ums_work_roles " .
                    "WHERE ums_artist_works.wid = :wid " .
                    "AND ums_artist_works.aid = ums_artists.aid " .
                    "AND ums_work_roles.wrid = ums_artist_works.wrid " .
                    "ORDER BY ums_artists.name ASC", [':wid' => $wid])->fetchAll(PDO::FETCH_ASSOC);

    foreach ($work_artists as $work_artist) {
      $work['artists'][] = $work_artist;
    }
    dblog('_ums_cardfile_get_work: AFTER FOREACH adding work artists - $work:', $work);

    // Get work events
    $work['events'] = array();
    $work_events = $db->query("SELECT ums_events.eid AS eid, " .
                    "ums_events.date AS date, " .
                    "ums_events.notes AS notes, " .
                    "ums_events.youtube_url AS youtube_url," .
                    "ums_events.program_nid AS program_nid, " .
                    "ums_events.photo_nid AS photo_nid, " .
                    "ums_series.sid AS sid, " .
                    "ums_series.name AS series, " .
                    "ums_venues.vid AS vid, " .
                    "ums_venues.name AS venue, " .
                    "ums_performances.pid AS pid " .
                    "FROM ums_events, ums_series, ums_venues, ums_performances " .
                    "WHERE ums_events.sid = ums_series.sid " .
                    "AND ums_events.vid = ums_venues.vid " .
                    "AND ums_events.eid = ums_performances.eid " .
                    "AND ums_performances.wid = :wid " .
                    "ORDER BY ums_events.date ASC", [':wid' => $wid])->fetchAll(PDO::FETCH_ASSOC);

    foreach ($work_events as $work_event) {
      $work['events'][] = $work_event;
    }
    dblog('_ums_cardfile_get_work: AFTER FOREACH adding work_events - $work:', $work);
  } else {
    $work = FALSE;
  }
  dblog('_ums_cardfile_get_work - returning: ', $work);
  return $work;
}


/*== HELPER FUNCTIONS ========================================================*/

function ums_cardfile_autocomplete($type) {
  $search = strtolower($_GET['search']);
  if ($type == 'artist') {
    $res = db_query(
      "SELECT * FROM ums_artists " .
                    "WHERE name LIKE '%%%s%%' " .
                    "OR name_plain LIKE '%%%s%%' " .
                    "OR alias LIKE '%%%s%%' " .
                    "ORDER BY name ASC LIMIT 25",
      $search,
      $search,
      $search
    );
    while ($match = db_fetch_array($res)) {
      echo $match['name'] . ' (aid:' . $match['aid'] . ")\n";
    }
  } elseif ($type == 'event') {
    $res = db_query(
      "SELECT * FROM ums_events " .
                    "WHERE date LIKE '%%%s%%' " .
                    "ORDER BY date ASC LIMIT 25",
      $search
    );
    while ($match = db_fetch_array($res)) {
      $match_event = _ums_cardfile_get_event($match['eid']);
      echo $match_event['date'] . ' at ' . $match_event['venue'] . ' (eid:' . $match['eid'] . ")\n";
    }
  } elseif ($type == 'work') {
    $res = db_query(
      "SELECT * FROM ums_works " .
                    "WHERE title LIKE '%%%s%%' " .
                    "OR alternate LIKE '%%%s%%' " .
                    "OR notes LIKE '%%%s%%' " .
                    "ORDER BY title ASC LIMIT 25",
      $search,
      $search,
      $search
    );
    while ($match = db_fetch_array($res)) {
      echo $match['title'] . ' (wid:' . $match['wid'] . ")\n";
    }
  }
}

function ums_cardfile_recent_artists($new_aid = 0) {
  global $user;
   
  $db = \Drupal::database();

  $artists = array();

  $var_key = 'ums_cardfile_recent_artists_' . $user->uid;

  $row = $db->query("SELECT value FROM variable WHERE name = :name", [':name' => $var_key])->fetchOne();
  if ($row->value) {
    $artists = unserialize($row->value);
    $existing_list = TRUE;
  }

  if ($new_aid) {
    // If already in the list, remove it
    if ($artists[$new_aid]) {
      $artist_name = $artists[$new_aid];
      unset($artists[$new_aid]);
    } else {
      $row = $db->query(db_query("SELECT name FROM ums_artists WHERE aid = %d", $new_aid)->fetchOne());
      $artist_name = $row->name;
    }

    // Add to the beginning of the list
    $artists = array_reverse($artists, TRUE);
    $artists[$new_aid] = $artist_name;
    $artists = array_reverse($artists, TRUE);

    // If > 20 elements, pop the last one off the list
    if (count($artists) > 20) {
      array_pop($artists);
    }

    // Store updated list
    if ($existing_list) {
      db_query(
        'UPDATE @variable SET value = "%s" WHERE name = "%s"',
        serialize($artists),
        $var_key
      );
    } else {
      db_query(
        'INSERT INTO @variable (name, value) VALUES ("%s", "%s")',
        $var_key,
        serialize($artists)
      );
    }
  }

  return $artists;
}

function ums_cardfile_recent_artists_d8($new_aid = 0) {
  dblog('ums_cardfile_recent_artists_d8 ENTERED:', $new_aid);
    
  $db = \Drupal::database();
  $artists = [];
         
  $user_data = \Drupal::service('user.data');
  $user_id = \Drupal::currentUser()->id();
  $recent_artists = $user_data->get('ums_cardfile', $user_id, 'recent_artists');
  dblog('ums_cardfile_recent_artists_d8:', $recent_artists);
 
  if ($new_aid) {
    // If already in the list, remove it
    if ($recent_artists[$new_aid]) {
      $artist_name = $recent_artists[$new_aid];
      unset($recent_artists[$new_aid]);
    } else {
      $row = $db->query(db_query("SELECT name FROM ums_artists WHERE aid = :aid", [':aid' => $new_aid])->fetchOne());
      dblog('ums_cardfile_recent_artists_d8: getting name from ums_artists: ', $row);
      $artist_name = $row->name;
    }
    // Add to the beginning of the list
    $recent_artists = array_reverse($recent_artists, TRUE);
    $recent_artists[$new_aid] = $artist_name;
    $recent_artists = array_reverse($recent_artists, TRUE);

    // If > 20 elements, pop the last one off the list
    if (count($recent_artists) > 20) {
      array_pop($recent_artists);
    }

    $user_data->set('ums_cardfile', $user_id, 'recent_artists', $recent_artists);
  }

  return $recent_artists;
}


function ums_cardfile_normalize($string) {
  $a = 'ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûýýþÿŔŕ';
  $b = 'AAAAAAACEEEEIIIIDNOOOOOOUUUUYBSaaaaaaaceeeeiiiidnoooooouuuyybyRr';
  $string = utf8_decode($string);
  $string = strtr($string, utf8_decode($a), $b);

  return utf8_encode($string);
}
