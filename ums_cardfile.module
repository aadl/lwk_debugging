<?php

use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Symfony\Component\HttpFoundation\RedirectResponse;

// $Id$
// UMS cardfile module will provide for adding, editing and querying of records into the UMS card file

/**
 * Display help and module information
 * @return help text for section
 */
function ums_cardfile_help($path, $arg) {
  $output = '';

  switch ($path) {
  case "admin/help#ums_cardfile":
    $output = '<p>' .  t("UMS Card File CRUD Interface") . '</p>';

    break;
  }

  return $output;
}


/**
 * Valid permissions for UMS modules
 * @return array of valid permissions
 * need to change all permissions to a UMS only role
 */
function ums_cardfile_perm() {
  return ['edit ums card file records', 'view ums card file records'];
}


/**
 * Implements hook_theme().
 *
 * Register a module or theme's theme implementations.
 * The implementations declared by this hook specify how a particular render array is to be rendered as HTML.
 *
 * See: https://api.drupal.org/api/drupal/core%21lib%21Drupal%21Core%21Render%21theme.api.php/function/hook_theme/8.2.x
 *
 * If you change this method, clear theme registry and routing table 'drush cc theme-registry' and 'drush cc router'.
 */
function ums_cardfile_theme($existing, $type, $theme, $path) {
  return [
    'ums-cardfile-home' => [
      'variables' => [
      ]
    ],
    'ums-cardfile-artists' => [
      'variables' => [
        'artists' => NULL,
        'pager' => NULL,
        'filter' => NULL,
        'base_url' => $GLOBALS['base_url']
      ]
    ],
    'ums-cardfile-artist' => [
      'variables' => [
        'artist' => NULL,
      ]
    ],
    'ums-cardfile-merge-artists' => [
      'variables' => [
        'merge_data' => NULL,
      ]
    ],
    'ums-cardfile-venues' => [
      'variables' => [
        'venues' => NULL,
        'venue_add_form' => NULL,
      ]
    ],
    'ums-cardfile-venue' => [
      'variables' => [
        'venue' => NULL,
      ]
    ],
    'ums-cardfile-events' => [
      'variables' => [
        'year' => NULL,
        'rows' => NULL,
      ]
    ],
    'ums-cardfile-event' => [
      'variables' => [
        'event' => NULL,
        'event_add_performance_form' => NULL,
      ]
    ],

    'ums-cardfile-series' => [
      'variables' => [
        'series' => NULL,
        'series_add_form' => NULL,
      ]
    ],

    'ums-cardfile-works' => [
      'variables' => [
        'works' => NULL,
        'pager' => NULL,
        'filter' => NULL,
        'base_url' => $GLOBALS['base_url']     ]
    ],
    'ums-cardfile-work' => [
      'variables' => [
        'work' => NULL,
        'work_add_artist_form' => NULL,
      ]
    ],
    'ums-cardfile-merge-works' => [
      'variables' => [
        'merge_data' => NULL,
      ]
    ],
 
    'ums-cardfile-performance' => [
      'variables' => [
        'performance' => NULL,
        'work_add_artist_form' => NULL,
        'performance_add_artist_form' => NULL,
        'performance_copy_artists_form' => NULL,
      ]
    ],

     'ums-cardfile-perfroles' => [
      'variables' => [
        'perfroles' => NULL,
        'perf_role_add_form' => NULL,
      ]
    ],

     'ums-cardfile-workroles' => [
      'variables' => [
        'workroles' => NULL,
        'work_role_add_form' => NULL,
        'return' => NULL,
      ]
    ],
    'ums-cardfile-searchadd' => [
      'variables' => [
        'heading_text' => NULL,
        'source_type' => NULL,
        'source_eid' => NULL,
        'copy_performance_flag' => FALSE,
        'source_event' => NULL,
        'search_terms_list' => NULL,
        'works' => NULL,
        'artists' => NULL,
        'source_type' => NULL,
        'source_id' => NULL,
        'type' => NULL,
        'search' => NULL,
      ]
    ]
  ];
}

// ---------------------------------------------------------------------------------------------------
// DRUPAL 8 MIGRATION NEW METHODS
// ---------------------------------------------------------------------------------------------------
  /*
* Debugging routine to log to the <root folder>/LWKLWK.log IN arborcat.module
*/
function dblog(...$things_to_log) {
  $line_to_log = '';
  foreach ($things_to_log as $item) {
    $line_to_log = $line_to_log . ' ' . print_r($item, TRUE);
  }
  // prepend date/time onto log line
  $now_date_time = new DrupalDateTime();
  $date_time_string = (string) $now_date_time->format('Y-m-d H:i:s');
  $complete_line = '[' . $date_time_string . '] ' . $line_to_log . "\n";
  error_log($complete_line, 3, "LWKLWK.log");
}

function ums_cardfile_create_link($link_text, $url_String, $url_options = []) {
  $host = \Drupal::request()->getSchemeAndHttpHost();
  $url = Url::fromUri($host . '/' . $url_String, $url_options);
  return Link::fromTextAndUrl(t($link_text), $url)->toString();
}

function ums_cardfile_save($table_name, $fields_array, $field_key) {
  $db = \Drupal::database();
  $record_id = NULL;

  if ($field_key && $fields_array[$field_key]) {
    $record_id = $fields_array[$field_key];
    unset($fields_array[$field_key]);
    $db->update($table_name)->fields($fields_array)->condition($field_key, $record_id)->execute();
  }
  else {
    $query = $db->select($table_name, 'tn');
    // check if the record exists
    foreach ($fields_array as $field => $value) {
      $query->condition('tn.' . $field, $value, '=');
    }
    $count_query = $query->countQuery();
    $num_rows = $query->countQuery()->execute()->fetchField();

    if ($num_rows == 0) {
        $record_id = $db->insert($table_name)
      ->fields($fields_array)->execute();
      dblog('ums_cardfile_save: AFTER INSERT', $record_id);
    }
  }

  return $record_id;
}

// function ums_cardfile_drupal_goto($path, $options = []) {
//   dblog('ums_cardfile_drupal_goto: path = ', $path);
//   $return_path = Url::fromUri('internal:/' . $path, $options);
//   dblog('ums_cardfile_drupal_goto:  $return_path->toString() = ', $return_path->toString());

//   return $return_path->toString();
// }

function ums_cardfile_drupal_goto_url($path, $options = []) {
  $url = Url::fromUri('internal:/' . $path, ['query' => $options]);
  dblog('ums_cardfile_drupal_goto_url:  $url->toString() = ', $url->toString());

  return $url;
}

/*== ARTISTS =================================================================*/

function _ums_cardfile_get_artist($aid = 0) {
  dblog('_ums_cardfile_get_artist: ENTERED $aid:', $aid);
  $db = \Drupal::database();
  $artist = $db->query("SELECT ums_artists.aid AS aid, " .
                                    "ums_artists.name AS name, " .
                                    "ums_artists.name_plain AS name_plain, " .
                                    "ums_artists.alias AS alias, " .
                                    "ums_artists.notes AS notes, " .
                                    "ums_artists.photo_nid AS photo_nid " .
                                    "FROM ums_artists " .
                                    "WHERE ums_artists.aid = :aid", [':aid' => $aid])->fetchAssoc();

  // Get Works
  $works = $db->query("SELECT * " .
                  "FROM ums_artist_works, ums_work_roles, ums_works " .
                  "WHERE ums_artist_works.aid = :aid " .
                  "AND ums_artist_works.wrid = ums_work_roles.wrid " .
                  "AND ums_artist_works.wid = ums_works.wid " .
                  "ORDER BY ums_works.title ASC", [':aid' => $aid])->fetchAll(PDO::FETCH_ASSOC);
  
  foreach ($works as $work) {
    $artist['works'][] = $work;
  }

  // Get Performances
  $performances = $db->query("SELECT * " .
                  "FROM ums_artist_performances, ums_performance_roles, ums_performances, ums_events " .
                  "WHERE ums_artist_performances.aid = :aid " .
                  "AND ums_artist_performances.prid = ums_performance_roles.prid " .
                  "AND ums_artist_performances.pid = ums_performances.pid " .
                  "AND ums_performances.eid = ums_events.eid " .
                  "ORDER BY ums_events.date ASC", [':aid' => $aid])->fetchAll(PDO::FETCH_ASSOC);
  
  foreach ($performances as $perf) {
    $performance = _ums_cardfile_get_performance($perf['pid']);
    $performance['role'] = $perf['name'];
    $artist['performances'][] = $performance;
  }
  // Turn photo nid into links
  if ($artist['photo_nid']) {
    foreach (explode(',', $artist['photo_nid']) as $photo_nid) {
      $artist['photos'][] = ums_cardfile_create_link('Photo', 'node/' . $photo_nid);
    }
  }
  return $artist;
}

function _ums_cardfile_merge_artist($old_aid, $aid) {
  dblog('_ums_cardfile_merge_artist: ENTERED old_aid:', $old_aid, '$aid:', $aid);
  $db = \Drupal::database();
  // Copy info from old artist record to new if field is blank
  $old_artist = $db->query("SELECT * FROM ums_artists WHERE aid = :old_aid", [':old_aid' => $old_aid])->fetchAssoc();
  $artist = $db->query("SELECT * FROM ums_artists WHERE aid = :aid", [':aid' => $aid])->fetchAssoc();

  dblog('_ums_cardfile_merge_artist: AFTER DB QUERY old_artist:', $old_artist);
  dblog('_ums_cardfile_merge_artist: AFTER DB QUERY artist:', $artist);

  if (empty($old_artist['aid'])) {
    drupal_set_message("Cannot merge artist $old_aid (artist not found)");
    return new RedirectResponse('/cardfile/artists');
  } elseif (empty($artist['aid'])) {
    drupal_set_message("Cannot merge artist into artist $aid (artist not found)");
    return new RedirectResponse('/cardfile/artists');
  }

  $updated = FALSE;
  foreach ($old_artist as $field => $value) {
    if (empty($artist[$field])) {
      $artist[$field] = $value;
      $updated = TRUE;
    }
  }
  if ($updated) {
    ums_cardfile_save('ums_artists', $artist, 'aid');
  }

  // Move performances and works from old artist to artist
  $db->query("UPDATE IGNORE ums_artist_performances SET aid = :aid WHERE aid = :old_aid", [':aid' => $aid, ':old_aid' => $old_aid]);
  $db->query("UPDATE IGNORE ums_artist_works SET aid = :aid WHERE aid = :old_aid", [':aid' => $aid, ':old_aid' => $old_aid]);

  // DELETE old artist record
  $db->query("DELETE FROM ums_artist_performances WHERE aid = :old_aid", [':old_aid' => $old_aid]);
  $db->query("DELETE FROM ums_artist_works WHERE aid = :old_aid", [':old_aid' => $old_aid]);
  $db->query("DELETE FROM ums_artists WHERE aid = :old_aid", [':old_aid' => $old_aid]);

  drupal_set_message("Merged Artist #$old_aid (" . $old_artist['name'] .
                     ") into Artist #$aid (" . $artist['name'] . ")");
}

/*== PERFORMANCES ============================================================*/

function _ums_cardfile_get_performance($pid = 0) {
  dblog('_ums_cardfile_get_performance: ENTERED $aid:', $pid);
  $db = \Drupal::database();
  $performance = $db->query("SELECT ums_performances.pid AS pid, " .
                                    "ums_performances.eid AS eid, " .
                                    "ums_performances.wid AS wid, " .
                                    "ums_performances.notes AS notes, " .
                                    "ums_performances.youtube_url AS youtube_url," .
                                    "ums_performances.weight AS weight " .
                                    "FROM ums_performances " .
                                    "WHERE ums_performances.pid = :pid", [':pid' => $pid])->fetchAssoc();
  if (FALSE == empty($performance)) {
    // Get performance event & work
    $performance['event'] = _ums_cardfile_get_event($performance['eid']);
    $performance['work'] = _ums_cardfile_get_work($performance['wid']);

    // Get performance artists
    $performance['artists'] = [];
    $perf_artists = $db->query("SELECT ums_artists.aid AS aid, " .
                    "ums_artists.name AS name, " .
                    "ums_artists.alias AS alias, " .
                    "ums_performance_roles.name AS role " .
                    "FROM ums_artist_performances, ums_artists, ums_performance_roles " .
                    "WHERE ums_artist_performances.pid = :pid " .
                    "AND ums_artist_performances.aid = ums_artists.aid " .
                    "AND ums_performance_roles.prid = ums_artist_performances.prid " .
                    "ORDER BY ums_artists.name ASC", [':pid' => $pid])->fetchAll(PDO::FETCH_ASSOC);
    
    foreach ($perf_artists as $perf_artist) {
      $performance['artists'][] = $perf_artist;
    }
  }
  return $performance;
}

/*== EVENTS ==================================================================*/

function _ums_cardfile_get_event($eid = 0) {
  dblog('_ums_cardfile_get_event: >>>>>>>>>>>> ENTERED $eid:', $eid);
  $db = \Drupal::database();
  $event = $db->query("SELECT ums_events.eid AS eid, " .
                                   "ums_events.title AS title, " .
                                   "ums_events.date AS date, " .
                                   "ums_events.notes AS notes, " .
                                   "ums_events.program_nid AS program_nid, " .
                                   "ums_events.photo_nid AS photo_nid, " .
                                   "ums_events.youtube_url AS youtube_url," .
                                   "ums_series.sid AS sid, " .
                                   "ums_series.name AS series, " .
                                   "ums_venues.vid AS vid, " .
                                   "ums_venues.name AS venue " .
                                   "FROM ums_events, ums_series, ums_venues " .
                                   "WHERE ums_events.sid = ums_series.sid " .
                                   "AND ums_events.vid = ums_venues.vid " .
                                   "AND ums_events.eid = :eid", [':eid' => $eid])->fetchAssoc();
  if (FALSE == empty($event)) {
    // Get performances
    $performances = $db->query("SELECT * FROM ums_performances, ums_works " .
                    "WHERE ums_performances.eid = :eid " .
                    "AND ums_performances.wid = ums_works.wid " .
                    "ORDER BY ums_performances.weight ASC", [':eid' => $eid])->fetchAll(PDO::FETCH_ASSOC);

    $event['performances'] = [];
    foreach ($performances as $performance) {
      $event['performances'][] = $performance;
    }

    // Turn program nid into links
    if ($event['program_nid']) {
      foreach (explode(',', $event['program_nid']) as $program_nid) {
        $program_nid = trim($program_nid);
        if (strpos($program_nid, '#') !== FALSE) {
          $parts = explode('#', $program_nid);
          $event['programs'][] = ums_cardfile_create_link(
            'Program',
            'node/' . $parts[0],
            ['fragment' => $parts[1]]
          );
        } else {
          $event['programs'][] = ums_cardfile_create_link('Program', 'node/' . $program_nid);
        }
      }
    }

    // Turn photo nid into links
    if ($event['photo_nid']) {
      foreach (explode(',', $event['photo_nid']) as $photo_nid) {
        $event['photos'][] = ums_cardfile_create_link('Photo', 'node/' . $photo_nid);
      }
    }
  }
  dblog('_ums_cardfile_get_event: EXITING'); 
  return $event;
}

/*== WORKS ===================================================================*/

function _ums_cardfile_get_work($wid = 0) {
  dblog('_ums_cardfile_get_work: ENTERED $wid:', $wid);
  $db = \Drupal::database();
  $work = $db->query("SELECT ums_works.wid AS wid, " .
                                  "ums_works.title AS title, " .
                                  "ums_works.alternate AS alternate, " .
                                  "ums_works.notes AS notes, " .
                                  "ums_works.youtube_url AS youtube_url " .
                                  "FROM ums_works " .
                                  "WHERE ums_works.wid = :wid", [':wid' => $wid])->fetchAssoc();

  if ($work['wid']) {
    // Get work artists
    $work['artists'] = [];
    $work_artists = $db->query("SELECT ums_artists.aid AS aid, " .
                    "ums_artists.name AS name, " .
                    "ums_artists.alias AS alias, " .
                    "ums_work_roles.name AS role " .
                    "FROM ums_artist_works, ums_artists, ums_work_roles " .
                    "WHERE ums_artist_works.wid = :wid " .
                    "AND ums_artist_works.aid = ums_artists.aid " .
                    "AND ums_work_roles.wrid = ums_artist_works.wrid " .
                    "ORDER BY ums_artists.name ASC", [':wid' => $wid])->fetchAll(PDO::FETCH_ASSOC);

    foreach ($work_artists as $work_artist) {
      $work['artists'][] = $work_artist;
    }

    // Get work events
    $work['events'] = [];
    $work_events = $db->query("SELECT ums_events.eid AS eid, " .
                    "ums_events.date AS date, " .
                    "ums_events.notes AS notes, " .
                    "ums_events.youtube_url AS youtube_url," .
                    "ums_events.program_nid AS program_nid, " .
                    "ums_events.photo_nid AS photo_nid, " .
                    "ums_series.sid AS sid, " .
                    "ums_series.name AS series, " .
                    "ums_venues.vid AS vid, " .
                    "ums_venues.name AS venue, " .
                    "ums_performances.pid AS pid " .
                    "FROM ums_events, ums_series, ums_venues, ums_performances " .
                    "WHERE ums_events.sid = ums_series.sid " .
                    "AND ums_events.vid = ums_venues.vid " .
                    "AND ums_events.eid = ums_performances.eid " .
                    "AND ums_performances.wid = :wid " .
                    "ORDER BY ums_events.date ASC", [':wid' => $wid])->fetchAll(PDO::FETCH_ASSOC);

    foreach ($work_events as $work_event) {
      $work['events'][] = $work_event;
    }
  } else {
    $work = FALSE;
  }
  return $work;
}

function _ums_cardfile_merge_work($old_wid, $wid) {
  // Copy info from old work record to new if field is blank
  $old_work = db_fetch_array(db_query("SELECT * FROM ums_works WHERE wid = %d", $old_wid));
  $work = db_fetch_array(db_query("SELECT * FROM ums_works WHERE wid = %d", $wid));

  if (empty($old_work['wid'])) {
    drupal_set_message("Cannot merge Repertoire $old_wid (repertoire not found)");
    return new RedirectResponse('/cardfile/works');
  } elseif (empty($work['wid'])) {
    drupal_set_message("Cannot merge Repertoire into Repertoire $wid (repertoire not found)");
    return new RedirectResponse('/cardfile/works');
  }

  $updated = FALSE;
  foreach ($old_work as $field => $value) {
    if (empty($work[$field])) {
      $work[$field] = $value;
      $updated = TRUE;
    }
  }
  if ($updated) {
    drupal_write_record('ums_works', $work, 'wid');
  }

  // Move artists and performances from old work to work
  db_query("UPDATE IGNORE ums_artist_works SET wid = %d WHERE wid = %d", $wid, $old_wid);
  db_query("UPDATE IGNORE ums_performances SET wid = %d WHERE wid = %d", $wid, $old_wid);

  // DELETE old work record
  db_query("DELETE FROM ums_artist_works WHERE wid = %d", $old_wid);
  db_query("DELETE FROM ums_performances WHERE wid = %d", $old_wid);
  db_query("DELETE FROM ums_works WHERE wid = %d", $old_wid);

  drupal_set_message("Merged Repertoire #$old_wid (" . $old_work['title'] .
                     ") into Repertoire #$wid (" . $work['title'] . ")");
}

/*== HELPER FUNCTIONS ========================================================*/
function ums_cardfile_recent_artists_d8($new_aid = 0) {
    
  $db = \Drupal::database();
  $artists = [];
         
  $user_data = \Drupal::service('user.data');
  $user_id = \Drupal::currentUser()->id();
  $recent_artists = $user_data->get('ums_cardfile', $user_id, 'recent_artists');
 
  if ($new_aid) {
    // If already in the list, remove it
    if (count($recent_artists) > 0 && array_key_exists($new_aid, $recent_artists)) {
      $artist_name = $recent_artists[$new_aid];
      unset($recent_artists[$new_aid]);
    } else {
      $row = $db->query("SELECT name FROM ums_artists WHERE aid = :aid", [':aid' => $new_aid])->fetchAssoc();
      $artist_name = $row['name'];
    }
    // Add to the beginning of the list
    $recent_artists = array_reverse($recent_artists, TRUE);
    $recent_artists[$new_aid] = $artist_name;
    $recent_artists = array_reverse($recent_artists, TRUE);

    // If > 20 elements, pop the last one off the list
    if (count($recent_artists) > 20) {
      array_pop($recent_artists);
    }

    $user_data->set('ums_cardfile', $user_id, 'recent_artists', $recent_artists);
  }

  return $recent_artists;
}


function ums_cardfile_normalize($string) {
  $a = 'ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûýýþÿŔŕ';
  $b = 'AAAAAAACEEEEIIIIDNOOOOOOUUUUYBSaaaaaaaceeeeiiiidnoooooouuuyybyRr';
  $string = utf8_decode($string);
  $string = strtr($string, utf8_decode($a), $b);

  return utf8_encode($string);
}
