<?php
// $Id$
// UMS cardfile module will provide for adding, editing and querying of records into the UMS card file

/**
 * Valid permissions for UMS modules
 * @return array of valid permissions
 * need to change all permissions to a UMS only role
 */
function ums_cardfile_perm() {
  return array('edit ums card file records', 'view ums card file records' );
}

function ums_cardfile_menu() {
  $items = array();

  $items['cardfile'] = array(
    'title' => t('Beta UMS Home'),
    'page callback' => 'ums_cardfile_home',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/autocomplete'] = array(
    'title' => t('UMS Autocomplete'),
    'page callback' => 'ums_cardfile_autocomplete',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/events'] = array(
    'title' => t('Beta UMS Events'),
    'page callback' => 'ums_cardfile_events',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/event'] = array(
    'title' => t('Beta UMS Event'),
    'page callback' => 'ums_cardfile_event',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/event/edit'] = array(
    'title' => t('Beta UMS Events'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_event_form', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/event/delete'] = array(
    'title' => t('Delete UMS Event'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_event_delete_confirm', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/artists'] = array(
    'title' => t('Beta UMS Artists'),
    'page callback' => 'ums_cardfile_artists',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/artist/edit'] = array(
    'title' => t('Beta UMS Artists'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_artist_form', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/artist/delete'] = array(
    'title' => t('Delete UMS Artist'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_artist_delete_confirm', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/works'] = array(
    'title' => t('Beta UMS Works'),
    'page callback' => 'ums_cardfile_works',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/work'] = array(
    'title' => t('Beta UMS Work'),
    'page callback' => 'ums_cardfile_work',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/work/edit'] = array(
    'title' => t('Beta UMS Work Edit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_work_form', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/work/delete'] = array(
    'title' => t('Delete UMS Work'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_work_delete_confirm', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/venues'] = array(
    'title' => t('Beta UMS Venues'),
    'page callback' => 'ums_cardfile_venues',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/venues/delete'] = array(
    'title' => t('Delete Venue'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_delete_venue_confirm', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/series'] = array(
    'title' => t('Beta UMS Series'),
    'page callback' => 'ums_cardfile_series',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/series/delete'] = array(
    'title' => t('Delete Series'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_delete_series_confirm', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/perfroles'] = array(
    'title' => t('Beta UMS Performance Roles'),
    'page callback' => 'ums_cardfile_perfroles',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/perfroles/delete'] = array(
    'title' => t('Delete Performance Role'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_delete_perfrole_confirm', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/workroles'] = array(
    'title' => t('Beta UMS Work Roles'),
    'page callback' => 'ums_cardfile_workroles',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/workroles/delete'] = array(
    'title' => t('Delete Work Role'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_delete_workrole_confirm', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/performance'] = array(
    'title' => t('Beta UMS Performance'),
    'page callback' => 'ums_cardfile_performance',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/performance/delete'] = array(
    'title' => t('Delete UMS Performance'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_performance_delete_confirm', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/*== HOME ====================================================================*/
function ums_cardfile_home() {
  $output .= '<h1>' . t('UMS Cardfile Home') . '</h1>';
  $output .= '<p>' . l('UMS Artists List', 'cardfile/artists') . '</p>';
  $output .= '<p>' . l('UMS Events List', 'cardfile/events') . '</p>';
  $output .= '<p>' . l('UMS Works List', 'cardfile/works') . '</p>';

  return $output;
}

/*== VENUES ==================================================================*/

function ums_cardfile_venues() {
  $output .= drupal_get_form('ums_cardfile_venue_form');

  $rows = array();
  $result = db_query('SELECT * FROM ums_venues ORDER BY name');
  while ($venue = db_fetch_object($result)) {
    $rows[] = array($venue->name, '[' . l('X', "cardfile/venues/delete/$venue->vid") . ']');
  }
  if (count($rows)) {
    $output .= theme('table', array('Venue Name', 'DELETE?'), $rows);
  }
  else {
    $output .= '<p>No Venues Defined</p>';
  }

  $output .= '<p>' . l('UMS Events List', 'cardfile/events') . '</p>';
  return $output;
}

function ums_cardfile_venue_form($form_state) {
  $form = array(
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Add a Venue'),
    '#size' => 64,
    '#maxlength' => 128,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add'),
  );

  return $form;
}

function ums_cardfile_venue_form_submit($form, &$form_state) {
  $new_venue = new stdClass;
  $new_venue->name = $form_state['values']['name'];
  drupal_write_record('ums_venues', $new_venue);
  drupal_set_message('Added new Venue');
}

function ums_cardfile_delete_venue_confirm($form_state, $vid) {
  $form = array();

  $venue = db_fetch_object(db_query('SELECT * FROM ums_venues WHERE vid = %d', $vid));
  $form['vid'] = array(
    '#type' => 'value',
    '#value' => $vid,
  );
  return confirm_form($form,
                      t('Are you sure you want to remove this Venue?'),
                      (isset($_GET['destination']) ? $_GET['destination'] : 'cardfile/venues'),
                      '<h2>' . t('Are you sure you want to delete the Venue: "') . $venue->name . t('"? This action cannot be undone.') . '</h2>',
                      t('Delete'),
                      t('Cancel'));
}

function ums_cardfile_delete_venue_confirm_submit($form, &$form_state) {
  drupal_set_message("Removed Venue from database");
  db_query("DELETE FROM ums_venues WHERE vid = %d", $form_state['values']['vid']);
  $form_state['redirect'] = 'cardfile/venues';
}

/*== SERIES ==================================================================*/

function ums_cardfile_series() {
  $output .= drupal_get_form('ums_cardfile_series_form');

  $rows = array();
  $result = db_query('SELECT * FROM ums_series ORDER BY name');
  while ($series = db_fetch_object($result)) {
    $rows[] = array($series->name, '[' . l('X', "cardfile/series/delete/$series->sid") . ']');
  }
  if (count($rows)) {
    $output .= theme('table', array('Series Name', 'DELETE?'), $rows);
  }
  else {
    $output .= '<p>No Series Defined</p>';
  }

  $output .= '<p>' . l('UMS Events List', 'cardfile/events') . '</p>';
  return $output;
}

function ums_cardfile_series_form($form_state) {
  $form = array(
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Add a Series'),
    '#size' => 64,
    '#maxlength' => 128,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add'),
  );

  return $form;
}

function ums_cardfile_series_form_submit($form, &$form_state) {
  $new_series = new stdClass;
  $new_series->name = $form_state['values']['name'];
  drupal_write_record('ums_series', $new_series);
  drupal_set_message('Added new Series');
}

function ums_cardfile_delete_series_confirm($form_state, $sid) {
  $form = array();

  $series = db_fetch_object(db_query('SELECT * FROM ums_series WHERE sid = %d', $sid));
  $form['sid'] = array(
    '#type' => 'value',
    '#value' => $sid,
  );
  return confirm_form($form,
                      t('Are you sure you want to remove this series?'),
                      (isset($_GET['destination']) ? $_GET['destination'] : 'cardfile/series'),
                      '<h2>' . t('Are you sure you want to delete the series: "') . $series->name . t('"? This action cannot be undone.') . '</h2>',
                      t('Delete'),
                      t('Cancel'));
}

function ums_cardfile_delete_series_confirm_submit($form, &$form_state) {
  drupal_set_message("Removed Series from database");
  db_query("DELETE FROM ums_series WHERE sid = %d", $form_state['values']['sid']);
  $form_state['redirect'] = 'cardfile/series';
}

/*== EVENTS ==================================================================*/

function _ums_cardfile_get_event($eid = 0) {
  $event = db_fetch_array(db_query("SELECT ums_events.eid AS eid, " .
                                   "ums_events.date AS date, " .
                                   "ums_events.notes AS notes, " .
                                   "ums_events.program_nid AS program_nid, " .
                                   "ums_series.sid AS sid, " .
                                   "ums_series.name AS series, " .
                                   "ums_venues.vid AS vid, " .
                                   "ums_venues.name AS venue " .
                                   "FROM ums_events, ums_series, ums_venues " .
                                   "WHERE ums_events.sid = ums_series.sid " .
                                   "AND ums_events.vid = ums_venues.vid " .
                                   "AND ums_events.eid = %d", $eid));

  // Get performances
  $res = db_query("SELECT * FROM ums_performances, ums_works " .
                  "WHERE ums_performances.eid = %d " .
                  "AND ums_performances.wid = ums_works.wid " .
                  "ORDER BY ums_performances.wid", $eid);
  while ($performance = db_fetch_array($res)) {
    $event['performances'][] = $performance;
  }

  return $event;
}

function ums_cardfile_events() {
  $output .= '<h1>UMS Cardfile Events</h1>';
  $output .= '<ul>';
  $output .= '<li>' . l('Add New Event', 'cardfile/event/edit') . '</li>';
  $output .= '<li>' . l('Edit Venue List', 'cardfile/venues') . '</li>';
  $output .= '<li>' . l('Edit Series List', 'cardfile/series') . '</li>';
  $output .= '</ul>';

  $rows = array();
  $result = db_query('SELECT eid FROM ums_events ORDER BY date');
  while ($e = db_fetch_object($result)) {
    $event = _ums_cardfile_get_event($e->eid);
    $row = array('ID' => $event['eid'],
                 'Date' => $event['date'],
                 'Venue' => $event['venue'],
                 'Series' => $event['series'],
                 'Notes' => strlen($event['notes']) > 30 ? substr($event['notes'], 0, 30) . '...' : $event['notes'],
                 'Program' => $event['program_nid'] ? l('Program', 'node/' . $event['program_nid']) : '',
                 'View' => l('VIEW', 'cardfile/event/' . $e->eid),
                 'Edit' => l('EDIT', 'cardfile/event/edit/' . $e->eid),
                 'Delete' => l('DELETE', 'cardfile/event/delete/' . $e->eid),
                );
    $rows[] = $row;
    if (empty($header)) {
      $header = array_keys($row);
    }
  }
  if (count($rows)) {
    $output .= theme('table', $header, $rows);
  }
  else {
    $output .= '<p>No Events Defined</p>';
  }

  return $output;
}

function ums_cardfile_event($eid = 0) {
  if ($event = _ums_cardfile_get_event($eid)) {
    $output .= '<h1>UMS Event</h1>';
    $output .= '<p>' . l('Edit event data', 'cardfile/event/edit/' . $event['eid']) . '</p>';
    $output .= '<p><strong>Date:</strong> ' . $event['date'] . '</p>';
    $output .= '<p><strong>Venue:</strong> ' . $event['venue'] . '</p>';
    $output .= '<p><strong>Series:</strong> ' . $event['series'] . '</p>';
    if ($event['notes']) {
      $output .= '<p><strong>Notes:</strong> ' . $event['notes'] . '</p>';
    }
    if ($event['performances']) {
      $output .= '<h3>Performances</h3>';
      foreach ($event['performances'] as $performance) {
        $output .= '<p>' . $performance['title'] . ' : ' . l('Edit Performance Details', 'cardfile/performance/'. $performance['pid']) . '</p>';
      }
    }
    $output .= drupal_get_form('ums_cardfile_event_add_performance', $event['eid']);
  }
  else {
    drupal_set_message('Event not found', 'error');
    drupal_goto('cardfile/events');
  }
  return $output;
}

function ums_cardfile_event_add_performance($form_state, $eid) {
  $form = array(
    '#prefix' => '<fieldset class="collapsible collapsed"><legend>Add Performance</legend><div class="container-inline">',
    '#suffix' => '</div></fieldset>',
  );
  $form['eid'] = array(
    '#type' => 'value',
    '#value' => $eid,
  );
  $form['wid'] = array(
    '#type' => 'textfield',
    '#title' => t('Work ID'),
    '#size' => 8,
    '#maxlength' => 8,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add Work Performance'),
  );
  
  return $form;
}

function ums_cardfile_event_add_performance_submit($form, &$form_state) {
  $perf = new stdClass;
  $perf->wid = intval($form_state['values']['wid']);
  $perf->eid = $form_state['values']['eid'];
  drupal_write_record('ums_performances', $perf);  
}

function ums_cardfile_event_form($form_state, $eid = 0) {
  // get venues
  $venue_options = array();
  $res = db_query("SELECT * FROM ums_venues ORDER BY name");
  while ($venue = db_fetch_object($res)) {
    $venue_options[$venue->vid] = $venue->name;
  }
  // get series
  $series_options = array();
  $res = db_query("SELECT * FROM ums_series ORDER BY name");
  while ($series = db_fetch_object($res)) {
    $series_options[$series->sid] = $series->name;
  }

  $form['title'] = array(
    '#value' => '<h1>' . t('Edit UMS Event') . '</h1>',
  );
  if ($eid) {
    $event = _ums_cardfile_get_event($eid);
    $form['eid'] = array(
      '#type' => 'value',
      '#value' => $eid,
    );
  }
  $form['date'] = array(
    '#type' => 'textfield',
    '#title' => t('Date'),
    '#size' => 30,
    '#maxlength' => 64,
    '#default_value' => $event['date'],
    '#description' => t('Date of Event (YYYY-MM-DD [HH:MM:SS])') . '<br />' .
                      t('Event Time is optional, and should be in 24 hour format (e.g. 8:00 PM = 20:00:00)'),
  );
  $form['venue'] = array(
    '#type' => 'select',
    '#title' => t('Venue'),
    '#options' => $venue_options,
    '#default_value' => $event['vid'],
    '#description' => t('Location of Event') . ' [' . l('Edit Venue List', 'cardfile/venues') . ']',
  );
  $form['series'] = array(
    '#type' => 'select',
    '#title' => t('Series'),
    '#options' => $series_options,
    '#default_value' => $event['sid'],
    '#description' => t('Event Series') . ' [' . l('Edit Series List', 'cardfile/series') . ']',
  );
  $form['notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Notes'),
    '#default_value' => $event['notes'],
  );
  $form['program_nid'] = array(
    '#type' => 'textfield',
    '#title' => t('Program ID'),
    '#size' => 10,
    '#maxlength' => 10,
    '#default_value' => $event['program_nid'],
    '#description' => t('Node ID of the corresponding program'),
  );
  $form['submit'] = array(
    '#prefix' => '<div class="container-inline">',
    '#type' => 'submit',
    '#value' => t('Save Event'),
    '#suffix' => '&nbsp;' . l('Cancel', 'cardfile/events') . '</div>',
  );

  return $form;
}

function ums_cardfile_event_form_submit($form, $form_state) {
  $event = new stdClass;
  $event->date = $form_state['values']['date'];
  $event->vid = $form_state['values']['venue'];
  $event->sid = $form_state['values']['series'];
  $event->notes = $form_state['values']['notes'];
  $event->program_nid = $form_state['values']['program_nid'];

  if ($form_state['values']['eid']) {
    // update existing record
    $event->eid = $form_state['values']['eid'];
    drupal_write_record('ums_events', $event, 'eid');
  }
  else {
    // new event
    drupal_write_record('ums_events', $event);
  }

  drupal_set_message('Event saved');
  drupal_goto('cardfile/events');
}

function ums_cardfile_event_delete_confirm($form_state, $eid) {
  $event_details .= '<ul>';
  foreach (_ums_cardfile_get_event($eid) as $key => $data) {
    $event_details .= "<li><b>$key:</b> $data</li>";
  }
  $event_details .= '</ul>';

  $form = array();
  $form['eid'] = array(
    '#type' => 'value',
    '#value' => $eid,
  );
  return confirm_form($form,
                      t('Are you sure you want to delete this UMS Event'),
                      (isset($_GET['destination']) ? $_GET['destination'] : 'cardfile/events'),
                      '<h2>' . t('Are you sure you want to delete this UMS Event? This action cannot be undone.') . '</h2>' . $event_details,
                      t('Delete'),
                      t('Cancel'));
}

function ums_cardfile_event_delete_confirm_submit($form, &$form_state) {
  db_query("DELETE FROM ums_events WHERE eid = %d", $form_state['values']['eid']);
  drupal_set_message("Event has been deleted");
  $form_state['redirect'] = 'cardfile/events';
}

/*== ARTISTS =================================================================*/

function _ums_cardfile_get_artist($aid = 0) {
  $artist = db_fetch_array(db_query("SELECT ums_artists.aid AS aid, " .
                                    "ums_artists.name AS name, " .
                                    "ums_artists.name_plain AS name_plain, " .
                                    "ums_artists.alias AS alias, " .
                                    "ums_artists.notes AS notes " .
                                    "FROM ums_artists " .
                                    "WHERE ums_artists.aid = %d", $aid));
  return $artist;
}

function ums_cardfile_artists() {
  $output .= '<h1>UMS Cardfile Artists</h1>';
  $output .= '<ul>';
  $output .= '<li>' . l('Add New Artist', 'cardfile/artist/edit') . '</li>';
  $output .= '</ul>';

  $rows = array();
  $result = db_query('SELECT aid FROM ums_artists ORDER BY name_plain');
  while ($a = db_fetch_object($result)) {
    $artist = _ums_cardfile_get_artist($a->aid);
    $row = array('ID' => $artist['aid'],
                 'Name' => $artist['name'],
                 'Alias' => $artist['alias'],
                 'Notes' => strlen($artist['notes']) > 30 ? substr($artist['notes'], 0, 30) . '...' : $artist['notes'],
                 'Edit?' => l('EDIT', 'cardfile/artist/edit/' . $a->aid),
                 'Delete?' => l('DELETE', 'cardfile/artist/delete/' . $a->aid),
                );
    $rows[] = $row;
    if (empty($header)) {
      $header = array_keys($row);
    }
  }
  if (count($rows)) {
    $output .= theme('table', $header, $rows);
  }
  else {
    $output .= '<p>No Artists Defined</p>';
  }

  return $output;
}

function ums_cardfile_artist_form($form_state, $aid = 0) {
  $form['title'] = array(
    '#value' => '<h1>' . t('Edit UMS artist') . '</h1>',
  );
  if ($aid) {
    $artist = _ums_cardfile_get_artist($aid);
    $form['aid'] = array(
      '#type' => 'value',
      '#value' => $aid,
    );
  }
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#size' => 64,
    '#maxlength' => 128,
    '#default_value' => $artist['name'],
    '#description' => t('Name of Artist'),
  );
  $form['alias'] = array(
    '#type' => 'textfield',
    '#title' => t('Alias'),
    '#size' => 64,
    '#maxlength' => 256,
    '#default_value' => $artist['alias'],
    '#description' => t('Artist Aliases') . ' (' . t('separate multiple values with a comma') . ')',
  );
  $form['notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Notes'),
    '#default_value' => $artist['notes'],
  );
  $form['submit'] = array(
    '#prefix' => '<div class="container-inline">',
    '#type' => 'submit',
    '#value' => t('Save Artist'),
    '#suffix' => '&nbsp;' . l('Cancel', 'cardfile/artists') . '</div>',
  );

  return $form;
}

function ums_cardfile_artist_form_submit($form, $form_state) {
  $artist = new stdClass;
  $artist->name = $form_state['values']['name'];
  $artist->alias = $form_state['values']['alias'];
  $artist->notes = $form_state['values']['notes'];

  // Convert Name to NamePlain for matching
  $artist->name_plain = ums_cardfile_normalize($artist->name);

  if ($form_state['values']['aid']) {
    // update existing record
    $artist->aid = $form_state['values']['aid'];
    drupal_write_record('ums_artists', $artist, 'aid');
  }
  else {
    // new artist
    drupal_write_record('ums_artists', $artist);
  }

  drupal_set_message('Artist saved');
  drupal_goto('cardfile/artists');
}

function ums_cardfile_artist_delete_confirm($form_state, $aid) {
  $artist_details .= '<ul>';
  foreach (_ums_cardfile_get_artist($aid) as $key => $data) {
    $artist_details .= "<li><b>$key:</b> $data</li>";
  }
  $artist_details .= '</ul>';

  $form = array();
  $form['aid'] = array(
    '#type' => 'value',
    '#value' => $aid,
  );
  return confirm_form($form,
                      t('Are you sure you want to delete this UMS Artist'),
                      (isset($_GET['destination']) ? $_GET['destination'] : 'cardfile/artists'),
                      '<h2>' . t('Are you sure you want to delete this UMS Artist? This action cannot be undone.') . '</h2>' . $artist_details,
                      t('Delete'),
                      t('Cancel'));
}

function ums_cardfile_artist_delete_confirm_submit($form, &$form_state) {
  db_query("DELETE FROM ums_artists WHERE aid = %d", $form_state['values']['aid']);
  drupal_set_message("Artist has been deleted");
  $form_state['redirect'] = 'cardfile/artists';
}

/*== WORKS ===================================================================*/

function _ums_cardfile_get_work($wid = 0) {
  $work = db_fetch_array(db_query("SELECT ums_works.wid AS wid, " .
                                  "ums_works.title AS title, " .
                                  "ums_works.alternate AS alternate, " .
                                  "ums_works.notes AS notes " .
                                  "FROM ums_works " .
                                  "WHERE ums_works.wid = %d", $wid));

  // Get work artists
  $work['artists'] = array();
  $res = db_query("SELECT ums_artists.aid AS aid, " .
                  "ums_artists.name AS name, " .
                  "ums_artists.alias AS alias, " .
                  "ums_work_roles.name AS role " .
                  "FROM ums_artist_works, ums_artists, ums_work_roles " .
                  "WHERE ums_artist_works.wid = %d " .
                  "AND ums_artist_works.aid = ums_artists.aid " .
                  "AND ums_work_roles.wrid = ums_artist_works.wrid", $wid);
  while ($work_artist = db_fetch_array($res)) {
    $work['artists'][] = $work_artist;
  }

  return $work;
}

function ums_cardfile_works() {
  $output .= '<h1>UMS Cardfile Works</h1>';
  $output .= '<ul>';
  $output .= '<li>' . l('Add New Work', 'cardfile/work/edit') . '</li>';
  $output .= '<li>' . l('Edit Work Roles', 'cardfile/workroles') . '</li>';
  $output .= '</ul>';

  $rows = array();
  $result = db_query('SELECT wid FROM ums_works ORDER BY title');
  while ($w = db_fetch_object($result)) {
    $work = _ums_cardfile_get_work($w->wid);
    $row = array('ID' => $work['wid'],
                 'Title' => $work['title'],
                 'Alternate Title' => $work['alternate'],
                 'Notes' => strlen($work['notes']) > 30 ? substr($work['notes'], 0, 30) . '...' : $work['notes'],
                 'View' => l('VIEW', 'cardfile/work/' . $w->wid),
                 'Edit' => l('EDIT', 'cardfile/work/edit/' . $w->wid),
                 'Delete' => l('DELETE', 'cardfile/work/delete/' . $w->wid),
                );
    $rows[] = $row;
    if (empty($header)) {
      $header = array_keys($row);
    }
  }
  if (count($rows)) {
    $output .= theme('table', $header, $rows);
  }
  else {
    $output .= '<p>No Works Defined</p>';
  }

  return $output;
}

function ums_cardfile_work($wid = 0) {
  if ($work = _ums_cardfile_get_work($wid)) {
    $output .= '<h1>UMS Work</h1>';
    $output .= '<p>' . l('Edit work data', 'cardfile/work/edit/' . $work['wid']) . '</p>';
    $output .= '<p><strong>Title:</strong> ' . $work['title'] . '</p>';
    $output .= '<p><strong>Alternate:</strong> ' . $work['alternate'] . '</p>';
    if ($work['notes']) {
      $output .= '<p><strong>Notes:</strong> ' . $work['notes'] . '</p>';
    }
    if (count($work['artists'])) {
      $output .= '<h3>Work Artists</h3>';
      foreach ($work['artists'] as $work_artist) {
        $output .= '<p><strong>' . $work_artist['role'] . ':</strong> ' . $work_artist['name'] . '</p>';
      }
    }
    $output .= drupal_get_form('ums_cardfile_work_add_artist', $work['wid']);
  }
  else {
    drupal_set_message('Work not found', 'error');
    drupal_goto('cardfile/works');
  }
  return $output;
}

function ums_cardfile_work_add_artist($form_state, $wid) {
  // get work roles
  $work_role_options = array();
  $res = db_query("SELECT * FROM ums_work_roles ORDER BY name");
  while ($work_role = db_fetch_object($res)) {
    $work_role_options[$work_role->wrid] = $work_role->name;
  }
  
  $form = array(
    '#prefix' => '<fieldset class="collapsible collapsed"><legend>Add Work Artist</legend><div class="container-inline">',
    '#suffix' => '</div></fieldset>',
  );
  $form['wid'] = array(
    '#type' => 'value',
    '#value' => $wid,
  );
  $form['aid'] = array(
    '#type' => 'textfield',
    '#title' => t('Artist ID'),
    '#size' => 8,
    '#maxlength' => 8,
  );
  $form['wrid'] = array(
    '#type' => 'select',
    '#title' => 'Role',
    '#options' => $work_role_options,
    '#description' => '[' . l('Edit Work Roles', 'cardfile/workroles') . ']',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add Artist'),
  );
  
  return $form;
}

function ums_cardfile_work_add_artist_submit($form, &$form_state) {
  $artist_work = new stdClass;
  $artist_work->aid = intval($form_state['values']['aid']);
  $artist_work->wid = $form_state['values']['wid'];
  $artist_work->wrid = $form_state['values']['wrid'];
  
  drupal_write_record('ums_artist_works', $artist_work);
  drupal_goto('cardfile/work/' . $artist_work->wid);
}

function ums_cardfile_work_form($form_state, $wid = 0) {
  $form['title'] = array(
    '#value' => '<h1>' . t('Edit UMS Work') . '</h1>',
  );
  if ($wid) {
    $work = _ums_cardfile_get_work($wid);
    $form['wid'] = array(
      '#type' => 'value',
      '#value' => $wid,
    );
  }
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#size' => 64,
    '#maxlength' => 128,
    '#default_value' => $work['title'],
    '#description' => t('Title of Work'),
  );
  $form['alternate'] = array(
    '#type' => 'textfield',
    '#title' => t('Alternate Title'),
    '#size' => 64,
    '#maxlength' => 256,
    '#default_value' => $work['alternate'],
    '#description' => t('Alternate Titles for the Work') . ' (' . t('separate multiple values with a comma') . ')',
  );
  $form['notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Notes'),
    '#default_value' => $work['notes'],
  );
  $form['submit'] = array(
    '#prefix' => '<div class="container-inline">',
    '#type' => 'submit',
    '#value' => t('Save Work'),
    '#suffix' => '&nbsp;' . l('Cancel', 'cardfile/works') . '</div>',
  );

  return $form;
}

function ums_cardfile_work_form_submit($form, $form_state) {
  $work = new stdClass;
  $work->title = $form_state['values']['title'];
  $work->alternate = $form_state['values']['alternate'];
  $work->notes = $form_state['values']['notes'];

  if ($form_state['values']['wid']) {
    // update existing record
    $work->wid = $form_state['values']['wid'];
    drupal_write_record('ums_works', $work, 'wid');
  }
  else {
    // new work
    drupal_write_record('ums_works', $work);
  }

  drupal_set_message('Work saved');
  drupal_goto('cardfile/works');
}

function ums_cardfile_work_delete_confirm($form_state, $wid) {
  $work_details .= '<ul>';
  foreach (_ums_cardfile_get_work($wid) as $key => $data) {
    $work_details .= "<li><b>$key:</b> $data</li>";
  }
  $work_details .= '</ul>';

  $form = array();
  $form['wid'] = array(
    '#type' => 'value',
    '#value' => $wid,
  );
  return confirm_form($form,
                      t('Are you sure you want to delete this UMS Work'),
                      (isset($_GET['destination']) ? $_GET['destination'] : 'cardfile/works'),
                      '<h2>' . t('Are you sure you want to delete this UMS work? This action cannot be undone.') . '</h2>' . $work_details,
                      t('Delete'),
                      t('Cancel'));
}

function ums_cardfile_work_delete_confirm_submit($form, &$form_state) {
  db_query("DELETE FROM ums_works WHERE wid = %d", $form_state['values']['wid']);
  drupal_set_message("Work has been deleted");
  $form_state['redirect'] = 'cardfile/works';
}

/*== PERFORMANCE ROLES =======================================================*/

function ums_cardfile_perfroles() {
  $output .= drupal_get_form('ums_cardfile_perfrole_form');

  $rows = array();
  $result = db_query('SELECT * FROM ums_performance_roles ORDER BY name');
  while ($role = db_fetch_object($result)) {
    $rows[] = array($role->name, '[' . l('X', "cardfile/perfroles/delete/$role->prid") . ']');
  }
  if (count($rows)) {
    $output .= theme('table', array('Role Name', 'DELETE?'), $rows);
  }
  else {
    $output .= '<p>No Performance Roles Defined</p>';
  }

  $output .= '<p>' . l('UMS Events List', 'cardfile/events') . '</p>';
  return $output;
}

function ums_cardfile_perfrole_form($form_state) {
  $form = array(
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Add a Performance Role'),
    '#size' => 64,
    '#maxlength' => 128,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add'),
  );

  return $form;
}

function ums_cardfile_perfrole_form_submit($form, &$form_state) {
  $new_role = new stdClass;
  $new_role->name = $form_state['values']['name'];
  drupal_write_record('ums_performance_roles', $new_role);
  drupal_set_message('Added new role');
}

function ums_cardfile_delete_perfrole_confirm($form_state, $prid) {
  $form = array();

  $role = db_fetch_object(db_query('SELECT * FROM ums_performance_roles WHERE prid = %d', $prid));
  $form['prid'] = array(
    '#type' => 'value',
    '#value' => $prid,
  );
  return confirm_form($form,
                      t('Are you sure you want to remove this performance role?'),
                      (isset($_GET['destination']) ? $_GET['destination'] : 'cardfile/perfroles'),
                      '<h2>' . t('Are you sure you want to delete the performance role: "') . $role->name . t('"? This action cannot be undone.') . '</h2>',
                      t('Delete'),
                      t('Cancel'));
}

function ums_cardfile_delete_perfrole_confirm_submit($form, &$form_state) {
  drupal_set_message("Removed performance role from database");
  db_query("DELETE FROM ums_performance_roles WHERE prid = %d", $form_state['values']['prid']);
  $form_state['redirect'] = 'cardfile/perfroles';
}

/*== WORK ROLES ==============================================================*/

function ums_cardfile_workroles() {
  $output .= drupal_get_form('ums_cardfile_workrole_form');

  $rows = array();
  $result = db_query('SELECT * FROM ums_work_roles ORDER BY name');
  while ($role = db_fetch_object($result)) {
    $rows[] = array($role->name, '[' . l('X', "cardfile/workroles/delete/$role->wrid") . ']');
  }
  if (count($rows)) {
    $output .= theme('table', array('Role Name', 'DELETE?'), $rows);
  }
  else {
    $output .= '<p>No Work Roles Defined</p>';
  }

  $output .= '<p>' . l('UMS Works List', 'cardfile/works') . '</p>';
  return $output;
}

function ums_cardfile_workrole_form($form_state) {
  $form = array(
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Add a Work Role'),
    '#size' => 64,
    '#maxlength' => 128,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add'),
  );

  return $form;
}

function ums_cardfile_workrole_form_submit($form, &$form_state) {
  $new_role = new stdClass;
  $new_role->name = $form_state['values']['name'];
  drupal_write_record('ums_work_roles', $new_role);
  drupal_set_message('Added new work role');
}

function ums_cardfile_delete_workrole_confirm($form_state, $wrid) {
  $form = array();

  $role = db_fetch_object(db_query('SELECT * FROM ums_work_roles WHERE wrid = %d', $wrid));
  $form['wrid'] = array(
    '#type' => 'value',
    '#value' => $wrid,
  );
  return confirm_form($form,
                      t('Are you sure you want to remove this work role?'),
                      (isset($_GET['destination']) ? $_GET['destination'] : 'cardfile/workroles'),
                      '<h2>' . t('Are you sure you want to delete the work role: "') . $role->name . t('"? This action cannot be undone.') . '</h2>',
                      t('Delete'),
                      t('Cancel'));
}

function ums_cardfile_delete_workrole_confirm_submit($form, &$form_state) {
  drupal_set_message("Removed work role from database");
  db_query("DELETE FROM ums_work_roles WHERE wrid = %d", $form_state['values']['wrid']);
  $form_state['redirect'] = 'cardfile/workroles';
}

/*== PERFORMANCES ============================================================*/

function _ums_cardfile_get_performance($pid = 0) {
  $performance = db_fetch_array(db_query("SELECT ums_performances.pid AS pid, " .
                                         "ums_performances.eid AS eid, " .
                                         "ums_performances.wid AS wid, " .
                                         "ums_performances.notes AS notes " .
                                         "FROM ums_performances " .
                                         "WHERE ums_performances.pid = %d", $pid));
  
  // Get performance event & work
  $performance['event'] = _ums_cardfile_get_event($performance['eid']);
  $performance['work'] = _ums_cardfile_get_work($performance['wid']);

  // Get performance artists
  $performance['artists'] = array();
  $res = db_query("SELECT ums_artists.aid AS aid, " .
                  "ums_artists.name AS name, " .
                  "ums_artists.alias AS alias, " .
                  "ums_performance_roles.name AS role " .
                  "FROM ums_artist_performances, ums_artists, ums_performance_roles " .
                  "WHERE ums_artist_performances.pid = %d " .
                  "AND ums_artist_performances.aid = ums_artists.aid " .
                  "AND ums_performance_roles.prid = ums_artist_performances.prid", $performance['pid']);
  while ($perf_artist = db_fetch_array($res)) {
    $performance['artists'][] = $perf_artist;
  }

  return $performance;
}

function ums_cardfile_performance($pid) {
  if ($performance = _ums_cardfile_get_performance($pid)) {
    $output .= '<h1>UMS Performance</h1>';
    $output .= '<p><strong>Event:</strong> ' . $performance['event']['date'] . ' at ' . $performance['event']['venue'] . '</p>';
    $output .= '<p><strong>Work:</strong> ' . $performance['work']['title'] . '</p>';
    if ($performance['notes']) {
      $output .= '<p><strong>Notes:</strong> ' . $performance['notes'] . '</p>';
    }
    if (count($performance['artists'])) {
      $output .= '<h3>Performance Artists</h3>';
      foreach ($performance['artists'] as $perf_artist) {
        $output .= '<p><strong>' . $perf_artist['role'] . ':</strong> ' . $perf_artist['name'] . '</p>';
      }
    }
    $output .= drupal_get_form('ums_cardfile_performance_add_artist', $performance['pid']);
    $output .= '<p>[' . l('Return to Event', 'cardfile/event/' . $performance['eid']) . ']</p>';
  }
  else {
    drupal_set_message('Performance not found', 'error');
    drupal_goto('cardfile/events');
  }
  return $output;
}

function ums_cardfile_performance_add_artist($form_state, $pid) {
  // get performance roles
  $perf_role_options = array();
  $res = db_query("SELECT * FROM ums_performance_roles ORDER BY name");
  while ($perf_role = db_fetch_object($res)) {
    $perf_role_options[$perf_role->prid] = $perf_role->name;
  }
  
  $form = array(
    '#prefix' => '<fieldset class="collapsible collapsed"><legend>Add Performance Artist</legend><div class="container-inline">',
    '#suffix' => '</div></fieldset>',
  );
  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $pid,
  );
  $form['aid'] = array(
    '#type' => 'textfield',
    '#title' => t('Artist ID'),
    '#size' => 8,
    '#maxlength' => 8,
  );
  $form['prid'] = array(
    '#type' => 'select',
    '#title' => 'Role',
    '#options' => $perf_role_options,
    '#description' => '[' . l('Edit Performance Roles', 'cardfile/perfroles') . ']',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add Artist'),
  );
  
  return $form;
}

function ums_cardfile_performance_add_artist_submit($form, &$form_state) {
  $artist_perf = new stdClass;
  $artist_perf->aid = intval($form_state['values']['aid']);
  $artist_perf->pid = $form_state['values']['pid'];
  $artist_perf->prid = $form_state['values']['prid'];
  
  drupal_write_record('ums_artist_performances', $artist_perf);
  drupal_goto('cardfile/performance/' . $artist_perf->pid);
}

/*== HELPER FUNCTIONS ========================================================*/
function ums_cardfile_autocomplete($type) {
  $search = strtolower($_GET['search']);
  if ($type == 'artist') {
    $res = db_query("SELECT * FROM ums_artists " .
                    "WHERE name LIKE '%%%s%%' " .
                    "OR name_plain LIKE '%%%s%%' " .
                    "OR alias LIKE '%%%s%%' " .
                    "ORDER BY name ASC LIMIT 25",
                    $search, $search, $search);
    while ($match = db_fetch_array($res)) {
      echo $match['name'] . ' (aid:' . $match['aid'] . ")\n";
    }
  }
  else if ($type == 'event') {
    $res = db_query("SELECT * FROM ums_events " .
                    "WHERE date LIKE '%%%s%%' " .
                    "ORDER BY date ASC LIMIT 25",
                    $search);
    while ($match = db_fetch_array($res)) {
      $match_event = _ums_cardfile_get_event($match['eid']);
      echo $match_event['date'] . ' at ' . $match_event['venue'] . ' (eid:' . $match['eid'] . ")\n";
    }
  }
  else if ($type == 'work') {
    $res = db_query("SELECT * FROM ums_works " .
                    "WHERE title LIKE '%%%s%%' " .
                    "OR alternate LIKE '%%%s%%' " .
                    "OR notes LIKE '%%%s%%' " .
                    "ORDER BY title ASC LIMIT 25",
                    $search, $search, $search);
    while ($match = db_fetch_array($res)) {
      echo $match['title'] . ' (wid:' . $match['wid'] . ")\n";
    }
  }
}

function ums_cardfile_normalize($string){
    $a = 'ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûýýþÿŔŕ';
    $b = 'AAAAAAACEEEEIIIIDNOOOOOOUUUUYBSaaaaaaaceeeeiiiidnoooooouuuyybyRr';
    $string = utf8_decode($string);
    $string = strtr($string, utf8_decode($a), $b);
    return utf8_encode($string);
}
