<?php
// $Id$
// UMS cardfile module will provide for adding, editing and querying of records into the UMS card file

/**
 * Valid permissions for UMS modules
 * @return array of valid permissions
 * need to change all permissions to a UMS only role
 */
function ums_cardfile_perm() {
  return array('edit ums card file records', 'view ums card file records' );
}

function ums_cardfile_menu() {
  $items = array();

  $items['cardfile'] = array(
    'title' => t('Beta UMS Home'),
    'page callback' => 'ums_cardfile_home',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/autocomplete'] = array(
    'title' => t('UMS Autocomplete'),
    'page callback' => 'ums_cardfile_autocomplete',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/searchadd'] = array(
    'title' => t('UMS Search Add'),
    'page callback' => 'ums_cardfile_searchadd',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/join'] = array(
    'title' => t('UMS Join Records'),
    'page callback' => 'ums_cardfile_join',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/events'] = array(
    'title' => t('Beta UMS Events'),
    'page callback' => 'ums_cardfile_events',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/event'] = array(
    'title' => t('Beta UMS Event'),
    'page callback' => 'ums_cardfile_event',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/event/edit'] = array(
    'title' => t('Beta UMS Events'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_event_form', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/event/delete'] = array(
    'title' => t('Delete UMS Event'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_event_delete_confirm', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/artists'] = array(
    'title' => t('Beta UMS Artists'),
    'page callback' => 'ums_cardfile_artists',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/artist'] = array(
    'title' => t('Beta UMS Artist'),
    'page callback' => 'ums_cardfile_artist',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/artist/edit'] = array(
    'title' => t('Beta UMS Artists'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_artist_form', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/artists/merge'] = array(
    'title' => t('Merge Artists'),
    'page callback' => 'ums_cardfile_artists_merge',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/artist/delete'] = array(
    'title' => t('Delete UMS Artist'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_artist_delete_confirm', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/works'] = array(
    'title' => t('Beta UMS Repertoire'),
    'page callback' => 'ums_cardfile_works',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/work'] = array(
    'title' => t('Beta UMS Repertoire'),
    'page callback' => 'ums_cardfile_work',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/work/edit'] = array(
    'title' => t('Beta UMS Repertoire Edit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_work_form', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/works/merge'] = array(
    'title' => t('Merge Repertoire'),
    'page callback' => 'ums_cardfile_works_merge',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/work/delete_artist'] = array(
    'title' => t('Delete Creator'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_work_delete_artist_confirm', 3, 4),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/work/delete'] = array(
    'title' => t('Delete UMS Repertoire'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_work_delete_confirm', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/venues'] = array(
    'title' => t('Beta UMS Venues'),
    'page callback' => 'ums_cardfile_venues',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/venues/delete'] = array(
    'title' => t('Delete Venue'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_delete_venue_confirm', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/series'] = array(
    'title' => t('Beta UMS Series'),
    'page callback' => 'ums_cardfile_series',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/series/delete'] = array(
    'title' => t('Delete Series'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_delete_series_confirm', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/perfroles'] = array(
    'title' => t('Beta UMS Artist Roles'),
    'page callback' => 'ums_cardfile_perfroles',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/perfroles/delete'] = array(
    'title' => t('Delete Artist Role'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_delete_perfrole_confirm', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/workroles'] = array(
    'title' => t('Beta UMS Creator Roles'),
    'page callback' => 'ums_cardfile_workroles',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/workroles/delete'] = array(
    'title' => t('Delete Creator Role'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_delete_workrole_confirm', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/performance'] = array(
    'title' => t('Beta UMS Performance'),
    'page callback' => 'ums_cardfile_performance',
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/performance/edit'] = array(
    'title' => t('Beta UMS Performance Edit'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_performance_form', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['cardfile/performance/delete_artist'] = array(
    'title' => t('Delete Performance Artist'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_performance_delete_artist_confirm', 3, 4),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  $items['cardfile/performance/delete'] = array(
    'title' => t('Delete UMS Performance'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ums_cardfile_performance_delete_confirm', 3),
    'access arguments' => array('edit ums card file records'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/*== HOME ====================================================================*/
function ums_cardfile_home() {
  $output .= '<h1>' . t('UMS Cardfile Home') . '</h1>';
  $output .= '<p>' . l('UMS Artists List', 'cardfile/artists') . '</p>';
  $output .= '<p>' . l('UMS Events List', 'cardfile/events') . '</p>';
  $output .= '<p>' . l('UMS Repertoire List', 'cardfile/works') . '</p>';
  $output .= '<p>' . l('UMS Repertoire Roles List', 'cardfile/workroles') . '</p>';
  $output .= '<p>' . l('UMS Performance Roles List', 'cardfile/perfroles') . '</p>';

  return $output;
}

/*== VENUES ==================================================================*/

function ums_cardfile_venues() {
  $output .= drupal_get_form('ums_cardfile_venue_form');

  $rows = array();
  $result = db_query('SELECT * FROM ums_venues ORDER BY name');
  while ($venue = db_fetch_object($result)) {
    $rows[] = array($venue->name, '[' . l('X', "cardfile/venues/delete/$venue->vid") . ']');
  }
  if (count($rows)) {
    $output .= theme('table', array('Venue Name', 'DELETE?'), $rows);
  }
  else {
    $output .= '<p>No Venues Defined</p>';
  }

  $output .= '<p>' . l('UMS Events List', 'cardfile/events') . '</p>';
  return $output;
}

function ums_cardfile_venue_form($form_state) {
  $form = array(
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Add a Venue'),
    '#size' => 64,
    '#maxlength' => 128,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add'),
  );

  return $form;
}

function ums_cardfile_venue_form_submit($form, &$form_state) {
  $new_venue = new stdClass;
  $new_venue->name = $form_state['values']['name'];
  drupal_write_record('ums_venues', $new_venue);
  drupal_set_message('Added new Venue');
}

function ums_cardfile_delete_venue_confirm($form_state, $vid) {
  $form = array();

  $venue = db_fetch_object(db_query('SELECT * FROM ums_venues WHERE vid = %d', $vid));
  $form['vid'] = array(
    '#type' => 'value',
    '#value' => $vid,
  );
  return confirm_form($form,
                      t('Are you sure you want to remove this Venue?'),
                      (isset($_GET['destination']) ? $_GET['destination'] : 'cardfile/venues'),
                      '<h2>' . t('Are you sure you want to delete the Venue: "') . $venue->name . t('"? This action cannot be undone.') . '</h2>',
                      t('Delete'),
                      t('Cancel'));
}

function ums_cardfile_delete_venue_confirm_submit($form, &$form_state) {
  drupal_set_message("Removed Venue from database");
  db_query("DELETE FROM ums_venues WHERE vid = %d", $form_state['values']['vid']);
  $form_state['redirect'] = 'cardfile/venues';
}

/*== SERIES ==================================================================*/

function ums_cardfile_series() {
  $output .= drupal_get_form('ums_cardfile_series_form');

  $rows = array();
  $result = db_query('SELECT * FROM ums_series ORDER BY name');
  while ($series = db_fetch_object($result)) {
    $rows[] = array($series->name, '[' . l('X', "cardfile/series/delete/$series->sid") . ']');
  }
  if (count($rows)) {
    $output .= theme('table', array('Series Name', 'DELETE?'), $rows);
  }
  else {
    $output .= '<p>No Series Defined</p>';
  }

  $output .= '<p>' . l('UMS Events List', 'cardfile/events') . '</p>';
  return $output;
}

function ums_cardfile_series_form($form_state) {
  $form = array(
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Add a Series'),
    '#size' => 64,
    '#maxlength' => 128,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Add'),
  );

  return $form;
}

function ums_cardfile_series_form_submit($form, &$form_state) {
  $new_series = new stdClass;
  $new_series->name = $form_state['values']['name'];
  drupal_write_record('ums_series', $new_series);
  drupal_set_message('Added new Series');
}

function ums_cardfile_delete_series_confirm($form_state, $sid) {
  $form = array();

  $series = db_fetch_object(db_query('SELECT * FROM ums_series WHERE sid = %d', $sid));
  $form['sid'] = array(
    '#type' => 'value',
    '#value' => $sid,
  );
  return confirm_form($form,
                      t('Are you sure you want to remove this series?'),
                      (isset($_GET['destination']) ? $_GET['destination'] : 'cardfile/series'),
                      '<h2>' . t('Are you sure you want to delete the series: "') . $series->name . t('"? This action cannot be undone.') . '</h2>',
                      t('Delete'),
                      t('Cancel'));
}

function ums_cardfile_delete_series_confirm_submit($form, &$form_state) {
  drupal_set_message("Removed Series from database");
  db_query("DELETE FROM ums_series WHERE sid = %d", $form_state['values']['sid']);
  $form_state['redirect'] = 'cardfile/series';
}

/*== EVENTS ==================================================================*/

function _ums_cardfile_get_event($eid = 0) {
  $event = db_fetch_array(db_query("SELECT ums_events.eid AS eid, " .
                                   "ums_events.title AS title, " .
                                   "ums_events.date AS date, " .
                                   "ums_events.notes AS notes, " .
                                   "ums_events.program_nid AS program_nid, " .
                                   "ums_series.sid AS sid, " .
                                   "ums_series.name AS series, " .
                                   "ums_venues.vid AS vid, " .
                                   "ums_venues.name AS venue " .
                                   "FROM ums_events, ums_series, ums_venues " .
                                   "WHERE ums_events.sid = ums_series.sid " .
                                   "AND ums_events.vid = ums_venues.vid " .
                                   "AND ums_events.eid = %d", $eid));

  // Get performances
  $res = db_query("SELECT * FROM ums_performances, ums_works " .
                  "WHERE ums_performances.eid = %d " .
                  "AND ums_performances.wid = ums_works.wid " .
                  "ORDER BY ums_performances.weight ASC", $eid);
  while ($performance = db_fetch_array($res)) {
    $event['performances'][] = $performance;
  }

  // Turn program nid into links
  if ($event['program_nid']) {
    foreach (explode(',', $event['program_nid']) as $program_nid) {
      $program_nid = trim($program_nid);
      if (strpos($program_nid, '#') !== FALSE) {
        $parts = explode('#', $program_nid);
        $event['programs'][] = l('Program', 'node/' . $parts[0],
                                 array('fragment' => $parts[1]));
      }
      else {
        $event['programs'][] = l('Program', 'node/' . $program_nid);
      }
    }
  }

  return $event;
}

function ums_cardfile_events($year = '') {
  $output .= '<h1>UMS Cardfile Events</h1>';
  $output .= '<ul>';
  $output .= '<li>' . l('Add New Event', 'cardfile/event/edit') . '</li>';
  $output .= '<li>' . l('Edit Venue List', 'cardfile/venues') . '</li>';
  $output .= '<li>' . l('Edit Series List', 'cardfile/series') . '</li>';
  $output .= '</ul>';

  if ($year) {
    $rows = array();
    if ($year == 'all') {
      $result = db_query("SELECT * FROM ums_events WHERE 1 ORDER BY date");
    }
    else {
      $result = db_query('SELECT eid FROM ums_events WHERE YEAR(date) = %d ORDER BY date', $year);
    }
    while ($e = db_fetch_object($result)) {
      $event = _ums_cardfile_get_event($e->eid);
      $row = array('ID' => $event['eid'],
                   'Date' => $event['date'],
                   'Title' => $event['title'],
                   'Venue' => $event['venue'],
                   'Series' => $event['series'],
                   'Notes' => strlen($event['notes']) > 30 ? substr($event['notes'], 0, 30) . '...' : $event['notes'],
                   'Program' => $event['program_nid'] ? l('Program', 'node/' . $event['program_nid']) : '',
                   'View' => l('VIEW', 'cardfile/event/' . $e->eid),
                   'Edit' => l('EDIT', 'cardfile/event/edit/' . $e->eid),
                   'Delete' => l('DELETE', 'cardfile/event/delete/' . $e->eid),
                  );
      $rows[] = $row;
      if (empty($header)) {
        $header = array_keys($row);
      }
    }
    if (count($rows)) {
      $output .= theme('table', $header, $rows);
    }
    else {
      $output .= "<p>No Events for $year</p>";
    }
  }
  else {
    $rows = array();
    $result = db_query('SELECT YEAR(date) AS event_year, COUNT(eid) AS event_count FROM ums_events GROUP BY event_year ORDER BY event_year');
    while ($row = db_fetch_object($result)) {
      $row = array(
        'Year' => l($row->event_year, 'cardfile/events/' . $row->event_year),
        '# of Events' => $row->event_count,
      );
      $rows[] = $row;
      if (empty($header)) {
        $header = array_keys($row);
      }
    }
    if (count($rows)) {
      $output .= '<p>[ ' . l('VIEW ALL YEARS', 'cardfile/events/all') . ' ]</p>';
      $output .= theme('table', $header, $rows);
    }
    else {
      $output .= "<p>No Events defined</p>";
    }
  }

  return $output;
}

function ums_cardfile_event($eid = 0) {
  if ($event = _ums_cardfile_get_event($eid)) {
    $output .= '<h1>UMS Event' . ($event['title'] ? ': ' . $event['title'] : '') . '</h1>';
    $output .= '<p>' . l('Edit event data', 'cardfile/event/edit/' . $event['eid']) . '</p>';
    $output .= '<p><strong>Date:</strong> ' . $event['date'] . '</p>';
    $output .= '<p><strong>Venue:</strong> ' . $event['venue'] . '</p>';
    $output .= '<p><strong>Series:</strong> ' . $event['series'] . '</p>';
    if ($event['notes']) {
      $output .= '<p><strong>Notes:</strong> ' . $event['notes'] . '</p>';
    }
    if (is_array($event['programs'])) {
      $output .= '<p><strong>View Programs:</strong> ';
      $output .= implode(' | ', $event['programs']);
      $output .= '</p>';
    }
    if ($event['performances']) {
      $output .= '<h2>Repertoire Performed</h2>';
      foreach ($event['performances'] as $performance) {
        $performance = _ums_cardfile_get_performance($performance['pid']);
        $work = $performance['work'];
        $output .= '<table style="width: 100%;"><tr><td style="vertical-align: top;">';
        $output .= '<h3>' . $performance['weight'] . '. ' . l($work['title'], 'cardfile/work/' . $work['wid']) . '</h3>';
        if (count($work['artists'])) {
          $work_artists = array();
          foreach ($work['artists'] as $artist) {
            $work_artists[$artist['aid']]['name'] = $artist['name'];
            $work_artists[$artist['aid']]['roles'][] = $artist['role'];
          }
          foreach ($work_artists as $work_artist) {
            $output .= $work_artist['name'] . ' (' . implode(', ', $work_artist['roles']) . ')<br />';
          }
        }
        $output .= '</td><td style="text-align: right; vertical-align: top;">';
        if (count($performance['artists'])) {
          $performance_artists = array();
          foreach ($performance['artists'] as $artist) {
            $performance_artists[$artist['aid']]['name'] = $artist['name'];
            $performance_artists[$artist['aid']]['roles'][] = $artist['role'];
          }
          foreach ($performance_artists as $performance_artist) {
            $output .= implode(', ', $performance_artist['roles']) . ': ' . $performance_artist['name'] . '<br />';
          }
        }

        if ($performance['notes']) {
          $output .= '<p><strong>Notes:</strong> ' . $performance['notes'] . '</p>';
        }

        $output .= '<p>[' . l('Edit Repertoire Performance Details', 'cardfile/performance/'. $performance['pid']) . ']<br />';
        $output .= '[' . l('Delete Repertoire Performance', 'cardfile/performance/delete/'. $performance['pid']) . ']</p>';

        $output .= '</td></tr></table><hr />';
      }
    }
    $output .= drupal_get_form('ums_cardfile_event_add_performance', $event['eid']);

    $year = substr($event['date'], 0, 4);
    $output .= '<p>' . l('Return to Event list for ' . $year, 'cardfile/events/' . $year) . '</p>';
  }
  else {
    drupal_set_message('Event not found', 'error');
    drupal_goto('cardfile/events');
  }
  return $output;
}

function ums_cardfile_event_add_performance($form_state, $eid) {
  $form = array(
    '#prefix' => '<fieldset class="collapsible collapsed"><legend>Add Repertoire Performance</legend><div class="container-inline">',
    '#suffix' => '</div></fieldset>',
  );
  $form['eid'] = array(
    '#type' => 'value',
    '#value' => $eid,
  );
  $form['search'] = array(
    '#type' => 'textfield',
    '#title' => t('Search for existing repertoire'),
    '#size' => 32,
    '#maxlength' => 32,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  $form['addNew'] = array(
    '#value' => '<strong>- OR -</strong> ' . l('ADD NEW REPERTOIRE', 'cardfile/work/edit', array('query' => array('eid' => $eid))),
  );

  return $form;
}

function ums_cardfile_event_add_performance_submit($form, &$form_state) {
  drupal_goto('cardfile/searchadd/event/' . $form_state['values']['eid'] .
              '/work/' . $form_state['values']['search']);
}

function ums_cardfile_event_form($form_state, $eid = 0) {
  // get venues
  $venue_options = array();
  $res = db_query("SELECT * FROM ums_venues ORDER BY name");
  while ($venue = db_fetch_object($res)) {
    $venue_options[$venue->vid] = $venue->name;
  }
  // get series
  $series_options = array();
  $res = db_query("SELECT * FROM ums_series ORDER BY name");
  while ($series = db_fetch_object($res)) {
    $series_options[$series->sid] = $series->name;
  }

  $form['form_title'] = array(
    '#value' => '<h1>' . t('Edit UMS Event') . '</h1>',
  );
  if ($eid) {
    $event = _ums_cardfile_get_event($eid);
    $form['eid'] = array(
      '#type' => 'value',
      '#value' => $eid,
    );
  }
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Event Title'),
    '#size' => 64,
    '#maxlength' => 128,
    '#default_value' => $event['title'],
    '#description' => t('Title of event, if given'),
  );
  $form['date'] = array(
    '#type' => 'textfield',
    '#title' => t('Date'),
    '#size' => 30,
    '#maxlength' => 64,
    '#default_value' => $event['date'],
    '#description' => t('Date of Event (YYYY-MM-DD [HH:MM:SS])') . '<br />' .
                      t('Event Time is optional, and should be in 24 hour format (e.g. 8:00 PM = 20:00:00)'),
  );
  $form['venue'] = array(
    '#type' => 'select',
    '#title' => t('Venue'),
    '#options' => $venue_options,
    '#default_value' => $event['vid'],
    '#description' => t('Location of Event') . ' [' . l('Edit Venue List', 'cardfile/venues') . ']',
  );
  $form['series'] = array(
    '#type' => 'select',
    '#title' => t('Series'),
    '#options' => $series_options,
    '#default_value' => $event['sid'],
    '#description' => t('Event Series') . ' [' . l('Edit Series List', 'cardfile/series') . ']',
  );
  $form['notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Notes'),
    '#default_value' => $event['notes'],
  );
  $form['program_nid'] = array(
    '#type' => 'textfield',
    '#title' => t('Program ID'),
    '#size' => 64,
    '#maxlength' => 64,
    '#default_value' => $event['program_nid'],
    '#description' => t('Node ID of the corresponding program, separate multiple values with commas'),
  );
  $form['submit'] = array(
    '#prefix' => '<div class="container-inline">',
    '#type' => 'submit',
    '#value' => t('Save Event'),
    '#suffix' => '&nbsp;' . l('Cancel', 'cardfile/events') . '</div>',
  );

  return $form;
}

function ums_cardfile_event_form_submit($form, $form_state) {
  $event = new stdClass;
  $event->title = $form_state['values']['title'];
  $event->date = $form_state['values']['date'];
  $event->vid = $form_state['values']['venue'];
  $event->sid = $form_state['values']['series'];
  $event->notes = $form_state['values']['notes'];
  $event->program_nid = $form_state['values']['program_nid'];

  if ($form_state['values']['eid']) {
    // update existing record
    $event->eid = $form_state['values']['eid'];
    drupal_write_record('ums_events', $event, 'eid');
  }
  else {
    // new event
    drupal_write_record('ums_events', $event);
  }

  drupal_set_message('Event saved');
  drupal_goto('cardfile/event/' . $event->eid);
}

function ums_cardfile_event_delete_confirm($form_state, $eid) {
  $event_details .= '<ul>';
  foreach (_ums_cardfile_get_event($eid) as $key => $data) {
    $event_details .= "<li><b>$key:</b> $data</li>";
  }
  $event_details .= '</ul>';

  $form = array();
  $form['eid'] = array(
    '#type' => 'value',
    '#value' => $eid,
  );
  return confirm_form($form,
                      t('Are you sure you want to delete this UMS Event'),
                      (isset($_GET['destination']) ? $_GET['destination'] : 'cardfile/events'),
                      '<h2>' . t('Are you sure you want to delete this UMS Event? This action cannot be undone.') . '</h2>' . $event_details,
                      t('Delete'),
                      t('Cancel'));
}

function ums_cardfile_event_delete_confirm_submit($form, &$form_state) {
  db_query("DELETE FROM ums_events WHERE eid = %d", $form_state['values']['eid']);
  drupal_set_message("Event has been deleted");
  $form_state['redirect'] = 'cardfile/events';
}

/*== ARTISTS =================================================================*/

function _ums_cardfile_get_artist($aid = 0) {
  $artist = db_fetch_array(db_query("SELECT ums_artists.aid AS aid, " .
                                    "ums_artists.name AS name, " .
                                    "ums_artists.name_plain AS name_plain, " .
                                    "ums_artists.alias AS alias, " .
                                    "ums_artists.notes AS notes " .
                                    "FROM ums_artists " .
                                    "WHERE ums_artists.aid = %d", $aid));

  // Get Works
  $res = db_query("SELECT * " .
                  "FROM ums_artist_works, ums_work_roles, ums_works " .
                  "WHERE ums_artist_works.aid = %d " .
                  "AND ums_artist_works.wrid = ums_work_roles.wrid " .
                  "AND ums_artist_works.wid = ums_works.wid " .
                  "ORDER BY ums_works.title ASC", $aid);
  while ($work = db_fetch_array($res)) {
    $artist['works'][] = $work;
  }

  // Get Performances
  $res = db_query("SELECT * " .
                  "FROM ums_artist_performances, ums_performance_roles, ums_performances, ums_events " .
                  "WHERE ums_artist_performances.aid = %d " .
                  "AND ums_artist_performances.prid = ums_performance_roles.prid " .
                  "AND ums_artist_performances.pid = ums_performances.pid " .
                  "AND ums_performances.eid = ums_events.eid " .
                  "ORDER BY ums_events.date ASC", $aid);
  while ($perf = db_fetch_array($res)) {
    $performance = _ums_cardfile_get_performance($perf['pid']);
    $performance['role'] = $perf['name'];
    $artist['performances'][] = $performance;
  }

  return $artist;
}

function _ums_cardfile_merge_artist($old_aid, $aid) {
  // Copy info from old artist record to new if field is blank
  $old_artist = db_fetch_array(db_query("SELECT * FROM ums_artists WHERE aid = %d", $old_aid));
  $artist = db_fetch_array(db_query("SELECT * FROM ums_artists WHERE aid = %d", $aid));

  if (empty($old_artist['aid'])) {
    drupal_set_message("Cannot merge artist $old_aid (artist not found)");
    drupal_goto('cardfile/artists');
  }
  else if (empty($artist['aid'])) {
    drupal_set_message("Cannot merge artist into artist $aid (artist not found)");
    drupal_goto('cardfile/artists');
  }

  $updated = FALSE;
  foreach ($old_artist as $field => $value) {
    if (empty($artist[$field])) {
      $artist[$field] = $value;
      $updated = TRUE;
    }
  }
  if ($updated) {
    drupal_write_record('ums_artists', $artist, 'aid');
  }

  // Move performances and works from old artist to artist
  db_query("UPDATE IGNORE ums_artist_performances SET aid = %d WHERE aid = %d", $aid, $old_aid);
  db_query("UPDATE IGNORE ums_artist_works SET aid = %d WHERE aid = %d", $aid, $old_aid);

  // DELETE old artist record
  db_query("DELETE FROM ums_artist_performances WHERE aid = %d", $old_aid);
  db_query("DELETE FROM ums_artist_works WHERE aid = %d", $old_aid);
  db_query("DELETE FROM ums_artists WHERE aid = %d", $old_aid);

  drupal_set_message("Merged Artist #$old_aid (" . $old_artist['name'] .
                     ") into Artist #$aid (" . $artist['name'] . ")");
}

function ums_cardfile_artists($filter = '') {
  $artists_per_page = 100;
  $output .= '<h1>UMS Cardfile Artists</h1>';
  $output .= '<ul>';
  $output .= '<li>' . l('Add New Artist', 'cardfile/artist/edit') . '</li>';
  $output .= '</ul>';

  $alpha_links = array();
  foreach (range('A', 'Z') as $char) {
    if ($filter == $char) {
      $alpha_links[] = "<strong>$char</strong>";
    }
    else {
      $alpha_links[] = l($char, 'cardfile/artists/' . $char);
    }
  }
  if ($filter) {
    $alpha_links[] = l('Reset', 'cardfile/artists');
  }
  $output .= '<p>Filter: ' . implode(' - ', $alpha_links) . '</p>';

  $rows = array();
  if ($filter) {
    $result = pager_query('SELECT * FROM ums_artists WHERE name_plain LIKE "%s%%" ORDER BY name_plain', $artists_per_page, 0, NULL, $filter);
  }
  else {
    $result = pager_query('SELECT * FROM ums_artists ORDER BY name_plain', $artists_per_page);
  }
  while ($artist = db_fetch_array($result)) {
    $row = array('ID' => $artist['aid'],
                 'Name' => $artist['name'],
                 'Alias' => $artist['alias'],
                 'Notes' => strlen($artist['notes']) > 30 ? substr($artist['notes'], 0, 30) . '...' : $artist['notes'],
                 'View' => l('VIEW', 'cardfile/artist/' . $artist['aid']),
                 'Edit' => l('EDIT', 'cardfile/artist/edit/' . $artist['aid'],
                             array('query' => array('destination' => $_GET['q']))),
                 'Delete' => l('DELETE', 'cardfile/artist/delete/' . $artist['aid']),
                );
    $rows[] = $row;
    if (empty($header)) {
      $header = array_keys($row);
    }
  }
  if (count($rows)) {
    if ($pager = theme('pager', NULL, $artists_per_page, 0)) {
      $rows[] = array(array('data' => $pager, 'colspan' => '7'));
    }
    $output .= theme('table', $header, $rows);
  }
  else {
    $output .= '<p>No Artists Defined</p>';
  }

  return $output;
}

function ums_cardfile_artist($aid = 0) {
  $artist = _ums_cardfile_get_artist($aid);
  if ($artist['aid']) {
    $output .= '<h1>UMS Artist: ' . $artist['name'] . '</h1>';
    $output .= '<p>[ ' . l('edit artist info', 'cardfile/artist/edit/' . $artist['aid']) . ' ]</p>';
    if ($artist['alias']) {
      $output .= '<p>Alias: ' . $artist['alias'] . '</p>';
    }
    if ($artist['notes']) {
      $output .= '<p>Notes: ' . $artist['notes'] . '</p>';
    }

    $output .= '<h2>Repertoire as a Creator:</h2>';
    if (count($artist['works'])) {
      foreach ($artist['works'] as $work) {
        $output .= '<p>' . $work['name'] . ': ' . l($work['title'], 'cardfile/work/' . $work['wid']) . '</p>';
      }
    }
    else {
      $output .= '<p>No repertoire as a creator.</p>';
    }

    $output .= '<h2>Repertoire as a Performer:</h2>';
    if (count($artist['performances'])) {
      foreach ($artist['performances'] as $performance) {
        $output .= '<p>' . $performance['role'] . ': ' .
          l($performance['work']['title'], 'cardfile/performance/' . $performance['pid']) .
          ', ' . l($performance['event']['date'], 'cardfile/event/' . $performance['event']['eid']) .
          ' at ' . $performance['event']['venue'] .
          '</p>';
      }
    }
    else {
      $output .= '<p>No repertoire as a performer.</p>';
    }

    $output .= '<p>[ ' . l('See full artist list', 'cardfile/artists') . ' ]</p>';
  }
  else {
    drupal_set_message("Unable to find artist with ID:$aid");
    drupal_goto('cardfile/artists');
  }
  return $output;
}

function ums_cardfile_artist_form($form_state, $aid = 0) {
  $form['title'] = array(
    '#value' => '<h1>' . t('Edit UMS artist') . '</h1>',
  );
  if ($_GET['wid']) {
    $work = _ums_cardfile_get_work($_GET['wid']);
    $form['#prefix'] = '<p>Adding NEW Artist as a Creator of ' . $work['title'] . '</p>';
    $form['wid'] = array(
      '#type' => 'value',
      '#value' => $work['wid'],
    );
    // get work roles
    $work_role_options = array();
    $res = db_query("SELECT * FROM ums_work_roles ORDER BY name");
    while ($work_role = db_fetch_object($res)) {
      $work_role_options[$work_role->wrid] = $work_role->name;
    }
    $form['wrid'] = array(
      '#type' => 'select',
      '#title' => 'Role',
      '#options' => $work_role_options,
      '#description' => '[' . l('Edit Creator Roles', 'cardfile/workroles', array('query' => array('return' => $_GET['q']))) . ']',
    );
  }
  else if ($_GET['pid']) {
    $performance = _ums_cardfile_get_performance($_GET['pid']);
    $form['#prefix'] = '<p>Adding NEW Artist as a Repertoire Performance Artist of ' . $performance['work']['title'] . '</p>';
    $form['pid'] = array(
      '#type' => 'value',
      '#value' => $performance['pid'],
    );
    // get performance roles
    $perf_role_options = array();
    $res = db_query("SELECT * FROM ums_performance_roles ORDER BY name");
    while ($perf_role = db_fetch_object($res)) {
      $perf_role_options[$perf_role->prid] = $perf_role->name;
    }
    $form['prid'] = array(
      '#type' => 'select',
      '#title' => 'Role',
      '#options' => $perf_role_options,
      '#description' => '[' . l('Edit Artist Roles', 'cardfile/perfroles', array('query' => array('return' => $_GET['q']))) . ']',
    );
  }
  if ($aid) {
    $artist = _ums_cardfile_get_artist($aid);
    $form['aid'] = array(
      '#type' => 'value',
      '#value' => $artist['aid'],
    );
  }
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Name'),
    '#size' => 64,
    '#maxlength' => 128,
    '#default_value' => ($_GET['name'] ? $_GET['name'] : $artist['name']),
    '#description' => t('Name of Artist'),
  );
  $form['alias'] = array(
    '#type' => 'textfield',
    '#title' => t('Alias'),
    '#size' => 64,
    '#maxlength' => 256,
    '#default_value' => $artist['alias'],
    '#description' => t('Artist Aliases') . ' (' . t('separate multiple values with a comma') . ')',
  );
  $form['notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Notes'),
    '#default_value' => $artist['notes'],
  );
  if ($artist['aid']) {
    $form['merge_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Merge this artist into Artist ID'),
      '#size' => 8,
      '#maxlength' => 8,
      '#description' => t("Enter another Artist ID number to merge this artist information into that artist record"),
      '#prefix' => "<fieldset class=\"collapsible collapsed\"><legend>MERGE ARTIST</legend>",
      '#suffix' => "</fieldset>",
    );
  }
  $form['submit'] = array(
    '#prefix' => '<div class="container-inline">',
    '#type' => 'submit',
    '#value' => t('Save Artist'),
    '#suffix' => '&nbsp;' . l('Cancel', 'cardfile/artists') . '</div>',
  );

  return $form;
}

function ums_cardfile_artist_form_submit($form, $form_state) {
  // Check for merge ID
  if ($form_state['values']['aid'] && $form_state['values']['merge_id']) {
    if ($_REQUEST['destination']) {
      unset($_REQUEST['destination']);
    }
    drupal_goto('cardfile/artists/merge/' . $form_state['values']['aid'] . '/' . $form_state['values']['merge_id']);
  }

  $artist = new stdClass;
  $artist->name = $form_state['values']['name'];
  $artist->alias = $form_state['values']['alias'];
  $artist->notes = $form_state['values']['notes'];

  // Convert Name to NamePlain for matching
  $artist->name_plain = ums_cardfile_normalize($artist->name);

  if ($form_state['values']['aid']) {
    // update existing record
    $artist->aid = $form_state['values']['aid'];
    drupal_write_record('ums_artists', $artist, 'aid');
  }
  else {
    // new artist
    drupal_write_record('ums_artists', $artist);
  }

  if ($form_state['values']['wid']) {
    // Create new work artist
    drupal_goto('cardfile/join/work/' . $form_state['values']['wid'] . '/artist/' . $artist->aid,
                array('wrid' => $form_state['values']['wrid']));
  }
  else if ($form_state['values']['pid']) {
    // Create new work artist
    drupal_goto('cardfile/join/performance/' . $form_state['values']['pid'] . '/artist/' . $artist->aid,
                array('prid' => $form_state['values']['prid']));
  }

  drupal_set_message('Artist saved');
  drupal_goto('cardfile/artist/' . $artist->aid);
}

function ums_cardfile_artist_delete_confirm($form_state, $aid) {
  $artist_details .= '<ul>';
  foreach (_ums_cardfile_get_artist($aid) as $key => $data) {
    $artist_details .= "<li><b>$key:</b> $data</li>";
  }
  $artist_details .= '</ul>';

  $form = array();
  $form['aid'] = array(
    '#type' => 'value',
    '#value' => $aid,
  );
  return confirm_form($form,
                      t('Are you sure you want to delete this UMS Artist'),
                      (isset($_GET['destination']) ? $_GET['destination'] : 'cardfile/artists'),
                      '<h2>' . t('Are you sure you want to delete this UMS Artist? This action cannot be undone.') . '</h2>' . $artist_details,
                      t('Delete'),
                      t('Cancel'));
}

function ums_cardfile_artist_delete_confirm_submit($form, &$form_state) {
  db_query("DELETE FROM ums_artists WHERE aid = %d", $form_state['values']['aid']);
  drupal_set_message("Artist has been deleted");
  $form_state['redirect'] = 'cardfile/artists';
}

/**
 * Page: Merge Two Artist Records
 */
function ums_cardfile_artists_merge($old_aid, $aid, $confirm = '') {
  if ($confirm) {
    _ums_cardfile_merge_artist($old_aid, $aid);
    drupal_goto('cardfile/artist/' . $aid);
  }

  $old_artist = _ums_cardfile_get_artist($old_aid);
  $artist = _ums_cardfile_get_artist($aid);

  if ($old_artist['aid'] && $artist['aid']) {
    $old_artist['performances'] = count($old_artist['performances']);
    $old_artist['works'] = count($old_artist['works']);

    $artist['performances'] = count($artist['performances']);
    $artist['works'] = count($artist['works']);

    $merge_table = array();
    foreach ($old_artist as $field => $old_artist_data) {
      $arrows = (!empty($old_artist_data) && empty($artist[$field]) ? '<strong>>>></strong>' : '');
      $merge_table[] = array("<strong>$field</strong>", $old_artist_data, $arrows, $artist[$field]);
    }

    $content .= "<h1>Merge These Artist Records?</h1>";
    $content .= '<p style="color: red">Warning: Artist record #' . $old_artist['aid'] . ' will be deleted as a result of this merge</p>';

    $content .= theme('table', array('', 'Old Artist', '>>>', 'Artist'), $merge_table);

    $content .= '<ul>';
    $content .= '<li class="button green">' . l('MERGE', $_GET['q'] . '/1') . '</li>';
    $content .= '<li class="button red">' .l('Cancel', 'cardfile/artist/' . $old_aid) . '</li>';
    $content .= '</ul>';

    return $content;
  }
  else {
    drupal_set_message('Invalid Artist IDs', 'error');
    drupal_goto('cardfile/artists');
  }

  return $content;
}

/*== WORKS ===================================================================*/

function _ums_cardfile_get_work($wid = 0) {
  $work = db_fetch_array(db_query("SELECT ums_works.wid AS wid, " .
                                  "ums_works.title AS title, " .
                                  "ums_works.alternate AS alternate, " .
                                  "ums_works.notes AS notes " .
                                  "FROM ums_works " .
                                  "WHERE ums_works.wid = %d", $wid));

  if ($work['wid']) {
    // Get work artists
    $work['artists'] = array();
    $res = db_query("SELECT ums_artists.aid AS aid, " .
                    "ums_artists.name AS name, " .
                    "ums_artists.alias AS alias, " .
                    "ums_work_roles.name AS role " .
                    "FROM ums_artist_works, ums_artists, ums_work_roles " .
                    "WHERE ums_artist_works.wid = %d " .
                    "AND ums_artist_works.aid = ums_artists.aid " .
                    "AND ums_work_roles.wrid = ums_artist_works.wrid " .
                    "ORDER BY ums_artists.name ASC", $wid);
    while ($work_artist = db_fetch_array($res)) {
      $work['artists'][] = $work_artist;
    }

    // Get work events
    $work['events'] = array();
    $res = db_query("SELECT ums_events.eid AS eid, " .
                    "ums_events.date AS date, " .
                    "ums_events.notes AS notes, " .
                    "ums_events.program_nid AS program_nid, " .
                    "ums_series.sid AS sid, " .
                    "ums_series.name AS series, " .
                    "ums_venues.vid AS vid, " .
                    "ums_venues.name AS venue, " .
                    "ums_performances.pid AS pid " .
                    "FROM ums_events, ums_series, ums_venues, ums_performances " .
                    "WHERE ums_events.sid = ums_series.sid " .
                    "AND ums_events.vid = ums_venues.vid " .
                    "AND ums_events.eid = ums_performances.eid " .
                    "AND ums_performances.wid = %d " .
                    "ORDER BY ums_events.date ASC", $wid);
    while ($work_event = db_fetch_array($res)) {
      $work['events'][] = $work_event;
    }
  }
  else {
    $work = FALSE;
  }

  return $work;
}

function _ums_cardfile_merge_work($old_wid, $wid) {
  // Copy info from old work record to new if field is blank
  $old_work = db_fetch_array(db_query("SELECT * FROM ums_works WHERE wid = %d", $old_wid));
  $work = db_fetch_array(db_query("SELECT * FROM ums_works WHERE wid = %d", $wid));

  if (empty($old_work['wid'])) {
    drupal_set_message("Cannot merge Repertoire $old_wid (repertoire not found)");
    drupal_goto('cardfile/works');
  }
  else if (empty($work['wid'])) {
    drupal_set_message("Cannot merge Repertoire into Repertoire $wid (repertoire not found)");
    drupal_goto('cardfile/works');
  }

  $updated = FALSE;
  foreach ($old_work as $field => $value) {
    if (empty($work[$field])) {
      $work[$field] = $value;
      $updated = TRUE;
    }
  }
  if ($updated) {
    drupal_write_record('ums_works', $work, 'wid');
  }

  // Move artists and performances from old work to work
  db_query("UPDATE IGNORE ums_artist_works SET wid = %d WHERE wid = %d", $wid, $old_wid);
  db_query("UPDATE IGNORE ums_performances SET wid = %d WHERE wid = %d", $wid, $old_wid);

  // DELETE old work record
  db_query("DELETE FROM ums_artist_works WHERE wid = %d", $old_wid);
  db_query("DELETE FROM ums_performances WHERE wid = %d", $old_wid);
  db_query("DELETE FROM ums_works WHERE wid = %d", $old_wid);

  drupal_set_message("Merged Repertoire #$old_wid (" . $old_work['title'] .
                     ") into Repertoire #$wid (" . $work['title'] . ")");
}

function ums_cardfile_works($filter = '') {
  $works_per_page = 100;
  $output .= '<h1>UMS Cardfile Repertoire</h1>';
  $output .= '<ul>';
  $output .= '<li>' . l('Add New Repertoire', 'cardfile/work/edit') . '</li>';
  $output .= '<li>' . l('Edit Creator Roles', 'cardfile/workroles') . '</li>';
  $output .= '</ul>';

  $alpha_links = array();
  foreach (range('A', 'Z') as $char) {
    if ($filter == $char) {
      $alpha_links[] = "<strong>$char</strong>";
    }
    else {
      $alpha_links[] = l($char, 'cardfile/works/' . $char);
    }
  }
  if ($filter) {
    $alpha_links[] = l('Reset', 'cardfile/works');
  }
  $output .= '<p>Filter: ' . implode(' - ', $alpha_links) . '</p>';

  $rows = array();
  if ($filter) {
    $result = pager_query('SELECT wid FROM ums_works WHERE title LIKE "%s%%" ORDER BY title', $works_per_page, 0, NULL, $filter);
  }
  else {
    $result = pager_query('SELECT wid FROM ums_works ORDER BY title', $works_per_page);
  }
  while ($w = db_fetch_object($result)) {
    $work = _ums_cardfile_get_work($w->wid);

    // Format Creators
    $creators = '';
    if (count($work['artists'])) {
      $creators .= '<span style="font-size: smaller">';
      foreach ($work['artists'] as $artist) {
        $creators .= '<br />&nbsp;&bull; ' . $artist['role'] . ': ' .
                      l($artist['name'], 'cardfile/artist/' . $artist['aid']);
      }
      $creators .= '</span>';
    }
    
    $row = array('ID' => $work['wid'],
                 'Title' => '<strong>' . $work['title'] . '</strong>' . $creators,
                 'Alternate Title' => $work['alternate'],
                 'Notes' => strlen($work['notes']) > 30 ? substr($work['notes'], 0, 30) . '...' : $work['notes'],
                 'View' => l('VIEW', 'cardfile/work/' . $w->wid),
                 'Edit' => l('EDIT', 'cardfile/work/edit/' . $w->wid),
                 'Delete' => l('DELETE', 'cardfile/work/delete/' . $w->wid),
                );
    $rows[] = $row;
    if (empty($header)) {
      $header = array_keys($row);
    }
  }
  if (count($rows)) {
    if ($pager = theme('pager', NULL, $works_per_page, 0)) {
      $rows[] = array(array('data' => $pager, 'colspan' => '7'));
    }
    $output .= theme('table', $header, $rows);
  }
  else {
    $output .= '<p>No Repertoire Defined</p>';
  }

  return $output;
}

function ums_cardfile_work($wid = 0) {
  if ($work = _ums_cardfile_get_work($wid)) {
    $output .= '<h1>UMS Repertoire</h1>';
    $output .= '<p>' . l('Edit repertoire data', 'cardfile/work/edit/' . $work['wid']) . '</p>';
    $output .= '<p><strong>Title:</strong> ' . $work['title'] . '</p>';
    $output .= '<p><strong>Alternate:</strong> ' . $work['alternate'] . '</p>';
    if ($work['notes']) {
      $output .= '<p><strong>Notes:</strong> ' . $work['notes'] . '</p>';
    }
    if (count($work['artists'])) {
      $output .= '<h3>Creators</h3>';
      foreach ($work['artists'] as $work_artist) {
        $output .= '<p>';
        $output .= '<strong>' . $work_artist['role'] . ':</strong> ' . l($work_artist['name'], 'cardfile/artist/' . $work_artist['aid']);
        $output .= ' [' . l('X', 'cardfile/work/delete_artist/' . $wid . '/' . $work_artist['aid']) . ']';
        $output .= '</p>';
      }
    }
    $output .= drupal_get_form('ums_cardfile_work_add_artist', $work['wid']);
    if (count($work['events'])) {
      $output .= '<h3>Performed at these Events</h3>';
      foreach ($work['events'] as $work_event) {
        $output .= '<p>';
        $output .= l($work_event['date'], 'cardfile/event/' . $work_event['eid']);
        if ($work_event['venue']) {
          $output .= ' at <strong>' . $work_event['venue'] . '</strong>';
        }
        if ($work_event['series']) {
          $output .= ', ' . $work_event['series'] . ' Series';
        }
        $output .= ' [' . l('Edit Repertoire Performance Details', 'cardfile/performance/' . $work_event['pid']) . ' ]</p>';
      }
    }
  }
  else {
    drupal_set_message('Repertoire not found', 'error');
    drupal_goto('cardfile/works');
  }
  return $output;
}

function ums_cardfile_work_add_artist($form_state, $wid) {
  // get work roles
  $work_role_options = array();
  $res = db_query("SELECT * FROM ums_work_roles ORDER BY name");
  while ($work_role = db_fetch_object($res)) {
    $work_role_options[$work_role->wrid] = $work_role->name;
  }

  $form = array(
    '#prefix' => '<fieldset class="collapsible collapsed"><legend>Add Creator</legend>' .
                 '<table><tr><th>Select Role:</th><th>Select Artist:</th></tr><tr>',
    '#suffix' => '</tr></table></fieldset>',
  );
  $form['wid'] = array(
    '#type' => 'value',
    '#value' => $wid,
  );
  $form['role'] = array(
    '#prefix' => '<td><div class="container-inline">',
    '#suffix' => '</div></td>',
  );
  $form['role']['wrid'] = array(
    '#type' => 'select',
    '#title' => 'Role',
    '#options' => $work_role_options,
    '#description' => '[' . l('Edit Creator Roles', 'cardfile/workroles', array('query' => array('return' => $_GET['q']))) . ']',
  );
  $form['search'] = array(
    '#prefix' => '<td><div class="container-inline">',
    '#suffix' => '</div><p><strong>- OR -</strong></p>',
  );
  $form['search']['search_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Search for existing artist'),
    '#size' => 32,
    '#maxlength' => 32,
  );
  $form['search']['submit_search'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  $form['recent'] = array(
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div><p><strong>- OR -</strong></p>',
  );
  $form['recent']['recent_aid'] = array(
    '#type' => 'select',
    '#title' => 'Recent artists',
    '#options' => ums_cardfile_recent_artists(),
    '#description' => 'Select a recent artist',
  );
  $form['recent']['submit_recent'] = array(
    '#type' => 'submit',
    '#value' => t('Use This Artist'),
  );
  $form['addNew'] = array(
    '#value' => l('ADD NEW ARTIST', 'cardfile/artist/edit', array('query' => array('wid' => $wid))) . '</p></td>',
  );
  return $form;
}

function ums_cardfile_work_add_artist_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#parents'][0] == 'submit_recent') {
    drupal_goto('cardfile/join/work/' . $form_state['values']['wid'] .
                '/artist/' . $form_state['values']['recent_aid'], array('wrid' => $form_state['values']['wrid']));
  }
  else {
    drupal_goto('cardfile/searchadd/work/' . $form_state['values']['wid'] .
                '/artist/' . $form_state['values']['search_text'], array('wrid' => $form_state['values']['wrid']));
  }
}

function ums_cardfile_work_form($form_state, $wid = 0) {
  $cancel_path = 'cardfile/works';
  $form['title'] = array(
    '#value' => '<h1>' . t('Edit UMS Repertoire') . '</h1>',
  );
  if ($_GET['eid']) {
    $event = _ums_cardfile_get_event($_GET['eid']);
    $form['#prefix'] = '<p>Adding NEW Repertoire to event: ' . $event['date'] . ' at ' . $event['venue'] . '</p>';
    $form['eid'] = array(
      '#type' => 'value',
      '#value' => $event['eid'],
    );
  }
  if ($wid) {
    $work = _ums_cardfile_get_work($wid);
    $form['wid'] = array(
      '#type' => 'value',
      '#value' => $wid,
    );
    $cancel_path = 'cardfile/work/' . $work['wid'];
  }
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#size' => 64,
    '#maxlength' => 128,
    '#default_value' => ($_GET['title'] ? $_GET['title'] : $work['title']),
    '#description' => t('Title of Repertoire'),
  );
  $form['alternate'] = array(
    '#type' => 'textfield',
    '#title' => t('Alternate Title'),
    '#size' => 64,
    '#maxlength' => 256,
    '#default_value' => $work['alternate'],
    '#description' => t('Alternate Titles for the Repertoire') . ' (' . t('separate multiple values with a comma') . ')',
  );
  $form['notes'] = array(
    '#type' => 'textarea',
    '#title' => t('Notes'),
    '#default_value' => $work['notes'],
  );
  if ($work['wid']) {
    $form['merge_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Merge this repertoire into Repertoire ID'),
      '#size' => 8,
      '#maxlength' => 8,
      '#description' => t("Enter another Repertoire ID number to merge this repertoire information into that repertoire record"),
      '#prefix' => "<fieldset class=\"collapsible collapsed\"><legend>MERGE REPERTOIRE</legend>",
      '#suffix' => "</fieldset>",
    );
  }
  $form['submit'] = array(
    '#prefix' => '<div class="container-inline">',
    '#type' => 'submit',
    '#value' => t('Save Repertoire'),
    '#suffix' => '&nbsp;' . l('Cancel', $cancel_path) . '</div>',
  );

  return $form;
}

function ums_cardfile_work_form_submit($form, $form_state) {
  // Check for merge ID
  if ($form_state['values']['wid'] && $form_state['values']['merge_id']) {
    if ($_REQUEST['destination']) {
      unset($_REQUEST['destination']);
    }
    drupal_goto('cardfile/works/merge/' . $form_state['values']['wid'] . '/' . $form_state['values']['merge_id']);
  }

  $work = new stdClass;
  $work->title = $form_state['values']['title'];
  $work->alternate = $form_state['values']['alternate'];
  $work->notes = $form_state['values']['notes'];

  if ($form_state['values']['wid']) {
    // update existing record
    $work->wid = $form_state['values']['wid'];
    drupal_write_record('ums_works', $work, 'wid');
  }
  else {
    // new work
    drupal_write_record('ums_works', $work);
  }

  if ($form_state['values']['eid']) {
    // Create new performance
    drupal_goto('cardfile/join/event/' . $form_state['values']['eid'] . '/work/' . $work->wid);
  }

  drupal_set_message('Repertoire saved');
  drupal_goto('cardfile/work/' . $work->wid);
}

function ums_cardfile_work_delete_artist_confirm($form_state, $wid, $aid) {
  $work = _ums_cardfile_get_work($wid);
  $artist = _ums_cardfile_get_artist($aid);

  $form = array();
  $form['wid'] = array(
    '#type' => 'value',
    '#value' => $wid,
  );
  $form['aid'] = array(
    '#type' => 'value',
    '#value' => $aid,
  );
  return confirm_form($form,
                      t('Are you sure you want to remove this artist'),
                      (isset($_GET['destination']) ? $_GET['destination'] : 'cardfile/work/' . $wid),
                      '<h2>' . t('Are you sure you want to remove ' . $artist['name'] . ' as a Creator from ' .
                                 $work['title'] . '? This action cannot be undone.') . '</h2>',
                      t('Delete'),
                      t('Cancel'));
}

function ums_cardfile_work_delete_artist_confirm_submit($form, &$form_state) {
  db_query("DELETE FROM ums_artist_works WHERE aid = %d AND wid = %d",
           $form_state['values']['aid'], $form_state['values']['wid']);
  drupal_set_message("Artist has been deleted");
  $form_state['redirect'] = 'cardfile/work/' . $form_state['values']['wid'];
}

function ums_cardfile_work_delete_confirm($form_state, $wid) {
  $work_details .= '<ul>';
  foreach (_ums_cardfile_get_work($wid) as $key => $data) {
    $work_details .= "<li><b>$key:</b> $data</li>";
  }
  $work_details .= '</ul>';

  $form = array();
  $form['wid'] = array(
    '#type' => 'value',
    '#value' => $wid,
  );
  return confirm_form($form,
                      t('Are you sure you want to delete this UMS Repertoire'),
                      (isset($_GET['destination']) ? $_GET['destination'] : 'cardfile/works'),
                      '<h2>' . t('Are you sure you want to delete this UMS repertoire? This action cannot be undone.') . '</h2>' . $work_details,
                      t('Delete'),
                      t('Cancel'));
}

function ums_cardfile_work_delete_confirm_submit($form, &$form_state) {
  db_query("DELETE FROM ums_works WHERE wid = %d", $form_state['values']['wid']);
  drupal_set_message("Repertoire has been deleted");
  $form_state['redirect'] = 'cardfile/works';
}

/**
 * Page: Merge Two Work Records
 */
function ums_cardfile_works_merge($old_wid, $wid, $confirm = '') {
  if ($confirm) {
    _ums_cardfile_merge_work($old_wid, $wid);
    drupal_goto('cardfile/work/' . $wid);
  }

  $old_work = _ums_cardfile_get_work($old_wid);
  $work = _ums_cardfile_get_work($wid);

  if ($old_work['wid'] && $work['wid']) {
    $old_work['artists'] = count($old_work['artists']);
    $old_work['events'] = count($old_work['events']);

    $work['artists'] = count($work['artists']);
    $work['events'] = count($work['events']);

    $merge_table = array();
    foreach ($old_work as $field => $old_work_data) {
      $arrows = (!empty($old_work_data) && empty($work[$field]) ? '<strong>>>></strong>' : '');
      $merge_table[] = array("<strong>$field</strong>", $old_work_data, $arrows, $work[$field]);
    }

    $content .= "<h1>Merge These Repertoire Records?</h1>";
    $content .= '<p style="color: red">Warning: Repertoire record #' . $old_work['wid'] . ' will be deleted as a result of this merge</p>';

    $content .= theme('table', array('', 'Old Work', '>>>', 'Work'), $merge_table);

    $content .= '<ul>';
    $content .= '<li class="button green">' . l('MERGE', $_GET['q'] . '/1') . '</li>';
    $content .= '<li class="button red">' .l('Cancel', 'cardfile/work/' . $old_wid) . '</li>';
    $content .= '</ul>';

    return $content;
  }
  else {
    drupal_set_message('Invalid Repertoire IDs', 'error');
    drupal_goto('cardfile/works');
  }

  return $content;
}

/*== PERFORMANCE ROLES =======================================================*/

function ums_cardfile_perfroles() {
  $output .= drupal_get_form('ums_cardfile_perfrole_form', $_GET['return']);

  $rows = array();
  $result = db_query('SELECT * FROM ums_performance_roles ORDER BY name');
  while ($role = db_fetch_object($result)) {
    $rows[] = array($role->name, '[' . l('X', "cardfile/perfroles/delete/$role->prid") . ']');
  }
  if (count($rows)) {
    $output .= theme('table', array('Role Name', 'DELETE?'), $rows);
  }
  else {
    $output .= '<p>No Artist Roles Defined</p>';
  }

  if ($_GET['return']) {
    $output .= '<p>' . l('Return to previous page', $_GET['return']) . '</p>';
  }
  $output .= '<p>' . l('UMS Events List', 'cardfile/events') . '</p>';
  return $output;
}

function ums_cardfile_perfrole_form($form_state, $return = '') {
  $form = array(
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  if ($return) {
    $form['return'] = array(
      '#type' => 'value',
      '#value' => $return,
    );
  }
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Add a Artist Role'),
    '#size' => 64,
    '#maxlength' => 128,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => ($return ? t('Add and Return to Previous Page') : t('Add')),
  );

  return $form;
}

function ums_cardfile_perfrole_form_submit($form, &$form_state) {
  $new_role = new stdClass;
  $new_role->name = $form_state['values']['name'];
  drupal_write_record('ums_performance_roles', $new_role);
  drupal_set_message('Added new role');

  if ($return = $form_state['values']['return']) {
    drupal_goto($return);
  }
}

function ums_cardfile_delete_perfrole_confirm($form_state, $prid) {
  $form = array();

  $role = db_fetch_object(db_query('SELECT * FROM ums_performance_roles WHERE prid = %d', $prid));
  $form['prid'] = array(
    '#type' => 'value',
    '#value' => $prid,
  );
  return confirm_form($form,
                      t('Are you sure you want to remove this Artist Role?'),
                      (isset($_GET['destination']) ? $_GET['destination'] : 'cardfile/perfroles'),
                      '<h2>' . t('Are you sure you want to delete the Artist Role: "') . $role->name . t('"? This action cannot be undone.') . '</h2>',
                      t('Delete'),
                      t('Cancel'));
}

function ums_cardfile_delete_perfrole_confirm_submit($form, &$form_state) {
  drupal_set_message("Removed Artist Role from database");
  db_query("DELETE FROM ums_performance_roles WHERE prid = %d", $form_state['values']['prid']);
  $form_state['redirect'] = 'cardfile/perfroles';
}

/*== WORK ROLES ==============================================================*/

function ums_cardfile_workroles() {
  $output .= drupal_get_form('ums_cardfile_workrole_form', $_GET['return']);

  $rows = array();
  $result = db_query('SELECT * FROM ums_work_roles ORDER BY name');
  while ($role = db_fetch_object($result)) {
    $rows[] = array($role->name, '[' . l('X', "cardfile/workroles/delete/$role->wrid") . ']');
  }
  if (count($rows)) {
    $output .= theme('table', array('Role Name', 'DELETE?'), $rows);
  }
  else {
    $output .= '<p>No Creator Roles Defined</p>';
  }

  if ($_GET['return']) {
    $output .= '<p>' . l('Return to previous page', $_GET['return']) . '</p>';
  }
  $output .= '<p>' . l('UMS Works List', 'cardfile/works') . '</p>';
  return $output;
}

function ums_cardfile_workrole_form($form_state, $return = '') {
  $form = array(
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div>',
  );
  if ($return) {
    $form['return'] = array(
      '#type' => 'value',
      '#value' => $return,
    );
  }
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Add a Creator Role'),
    '#size' => 64,
    '#maxlength' => 128,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => ($return ? t('Add and Return to Previous Page') : t('Add')),
  );

  return $form;
}

function ums_cardfile_workrole_form_submit($form, &$form_state) {
  $new_role = new stdClass;
  $new_role->name = $form_state['values']['name'];
  drupal_write_record('ums_work_roles', $new_role);
  drupal_set_message('Added new Creator Role');

  if ($return = $form_state['values']['return']) {
    drupal_goto($return);
  }
}

function ums_cardfile_delete_workrole_confirm($form_state, $wrid) {
  $form = array();

  $role = db_fetch_object(db_query('SELECT * FROM ums_work_roles WHERE wrid = %d', $wrid));
  $form['wrid'] = array(
    '#type' => 'value',
    '#value' => $wrid,
  );
  return confirm_form($form,
                      t('Are you sure you want to remove this Creator Role?'),
                      (isset($_GET['destination']) ? $_GET['destination'] : 'cardfile/workroles'),
                      '<h2>' . t('Are you sure you want to delete the Creator Role: "') . $role->name . t('"? This action cannot be undone.') . '</h2>',
                      t('Delete'),
                      t('Cancel'));
}

function ums_cardfile_delete_workrole_confirm_submit($form, &$form_state) {
  drupal_set_message("Removed Creator Role from database");
  db_query("DELETE FROM ums_work_roles WHERE wrid = %d", $form_state['values']['wrid']);
  $form_state['redirect'] = 'cardfile/workroles';
}

/*== PERFORMANCES ============================================================*/

function _ums_cardfile_get_performance($pid = 0) {
  $performance = db_fetch_array(db_query("SELECT ums_performances.pid AS pid, " .
                                         "ums_performances.eid AS eid, " .
                                         "ums_performances.wid AS wid, " .
                                         "ums_performances.notes AS notes, " .
                                         "ums_performances.weight AS weight " .
                                         "FROM ums_performances " .
                                         "WHERE ums_performances.pid = %d", $pid));

  // Get performance event & work
  $performance['event'] = _ums_cardfile_get_event($performance['eid']);
  $performance['work'] = _ums_cardfile_get_work($performance['wid']);

  // Get performance artists
  $performance['artists'] = array();
  $res = db_query("SELECT ums_artists.aid AS aid, " .
                  "ums_artists.name AS name, " .
                  "ums_artists.alias AS alias, " .
                  "ums_performance_roles.name AS role " .
                  "FROM ums_artist_performances, ums_artists, ums_performance_roles " .
                  "WHERE ums_artist_performances.pid = %d " .
                  "AND ums_artist_performances.aid = ums_artists.aid " .
                  "AND ums_performance_roles.prid = ums_artist_performances.prid " .
                  "ORDER BY ums_artists.name ASC", $performance['pid']);
  while ($perf_artist = db_fetch_array($res)) {
    $performance['artists'][] = $perf_artist;
  }

  return $performance;
}

function ums_cardfile_performance($pid) {
  if ($performance = _ums_cardfile_get_performance($pid)) {
    $output .= '<h1>UMS Repertoire Performance</h1>';
    $output .= '<p>Performance #' . $performance['weight'] . ' at <strong>Event:</strong> ' . $performance['event']['date'] . ' at ' . $performance['event']['venue'] . '</p>';

    if ($performance['notes']) {
      $output .= '<p><strong>Notes:</strong> ' . $performance['notes'] . '</p>';
    }
    $output .= '<p>[ ' . l('edit performance notes & order', 'cardfile/performance/edit/' . $pid) . ' ]</p>';

    $output .= '<h3>Repertoire: ' .
               l($performance['work']['title'], 'cardfile/work/' . $performance['work']['wid']) .
               '</h3>';
    if (count($performance['work']['artists'])) {
      $output .= '<p>';
      foreach ($performance['work']['artists'] as $artist) {
        $output .= l($artist['name'], 'cardfile/artist/' . $artist['aid']) . ' (' . $artist['role'] . ')<br />';
      }
      $output .= '</p>';
    }
    $output .= '</p>';
    $output .= drupal_get_form('ums_cardfile_work_add_artist', $performance['work']['wid']);

    if (count($performance['artists'])) {
      $output .= '<h3>Performance Artists</h3>';
      foreach ($performance['artists'] as $perf_artist) {
        $output .= '<p>';
        $output .= '<strong>' . $perf_artist['role'] . ':</strong> ' . l($perf_artist['name'], 'cardfile/artist/' . $perf_artist['aid']);
        $output .= ' [' . l('X', 'cardfile/performance/delete_artist/' . $pid . '/' . $perf_artist['aid']) . ']';
        $output .= '</p>';
      }
    }
    $output .= drupal_get_form('ums_cardfile_performance_add_artist', $performance['pid']);
    $output .= drupal_get_form('ums_cardfile_performance_copy_artists', $performance['pid']);
    $output .= '<p>[' . l('Return to Event', 'cardfile/event/' . $performance['eid']) . ']</p>';
  }
  else {
    drupal_set_message('Performance not found', 'error');
    drupal_goto('cardfile/events');
  }
  return $output;
}

function ums_cardfile_performance_form($form_state, $pid) {
  $perf = _ums_cardfile_get_performance($pid);
  if ($perf['pid']) {
    $form['info'] = array(
      '#value' => '<h2>Editing Info for Performance of ' . $perf['work']['title'] . ' at ' .
                  $perf['event']['venue'] . ' on ' . $perf['event']['date'] . '</h2>',
    );
    $form['pid'] = array(
      '#type' => 'value',
      '#value' => $pid,
    );
    $form['weight'] = array(
      '#type' => 'textfield',
      '#title' => t('Performance Order'),
      '#default_value' => $perf['weight'],
      '#size' => 8,
      '#maxlength' => 8,
      '#description' => "Number corresponding to this performance's order in the event",
    );
    $form['notes'] = array(
      '#type' => 'textarea',
      '#title' => 'Performance Notes',
      '#default_value' => $perf['notes'],
      '#description' => 'Enter notes about this specific repertoire performance, e.g. "Encore"',
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => 'Save',
    );
    return $form;
  }
  else {
    drupal_set_message("Unable to find performance with ID: $pid", 'error');
    drupal_goto('cardfile');
  }
}

function ums_cardfile_performance_form_submit($form, $form_state) {
  $perf = new stdClass;
  $perf->pid = $form_state['values']['pid'];
  $perf->notes = $form_state['values']['notes'];
  $perf->weight = $form_state['values']['weight'];
  drupal_write_record('ums_performances', $perf, 'pid');
  drupal_set_message('Updated Performance');
  drupal_goto('cardfile/performance/' . $form_state['values']['pid']);
}

function ums_cardfile_performance_add_artist($form_state, $pid) {
  // get performance roles
  $perf_role_options = array();
  $res = db_query("SELECT * FROM ums_performance_roles ORDER BY name");
  while ($perf_role = db_fetch_object($res)) {
    $perf_role_options[$perf_role->prid] = $perf_role->name;
  }

  $form = array(
    '#prefix' => '<fieldset class="collapsible collapsed"><legend>Add Repertoire Performance Artist</legend>' .
                 '<table><tr><th>Select Role:</th><th>Select Artist:</th></tr><tr>',
    '#suffix' => '</tr></table></fieldset>',
  );
  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $pid,
  );
  $form['role'] = array(
    '#prefix' => '<td style="padding-right: 25px"><div class="container-inline">',
    '#suffix' => '</div></td>',
  );
  $form['role']['prid'] = array(
    '#type' => 'select',
    '#title' => 'Role',
    '#options' => $perf_role_options,
    '#description' => '[' . l('Edit Artist Roles', 'cardfile/perfroles', array('query' => array('return' => $_GET['q']))) . ']',
  );
  $form['search'] = array(
    '#prefix' => '<td><div class="container-inline">',
    '#suffix' => '</div><p><strong>- OR -</strong></p>',
  );
  $form['search']['search_text'] = array(
    '#type' => 'textfield',
    '#title' => t('Search for existing artist'),
    '#size' => 32,
    '#maxlength' => 32,
  );
  $form['search']['submit_search'] = array(
    '#type' => 'submit',
    '#value' => t('Search'),
  );
  $form['recent'] = array(
    '#prefix' => '<div class="container-inline">',
    '#suffix' => '</div><p><strong>- OR -</strong></p>',
  );
  $form['recent']['recent_aid'] = array(
    '#type' => 'select',
    '#title' => 'Recent artists',
    '#options' => ums_cardfile_recent_artists(),
  );
  $form['recent']['submit_recent'] = array(
    '#type' => 'submit',
    '#value' => t('Use This Artist'),
  );
  $form['addNew'] = array(
    '#value' => l('ADD NEW ARTIST', 'cardfile/artist/edit', array('query' => array('pid' => $pid))),
    '#suffix' => '</td>',
  );

  return $form;
}

function ums_cardfile_performance_add_artist_submit($form, &$form_state) {
  if ($form_state['clicked_button']['#parents'][0] == 'submit_recent') {
    drupal_goto('cardfile/join/performance/' . $form_state['values']['pid'] .
                '/artist/' . $form_state['values']['recent_aid'], array('prid' => $form_state['values']['prid']));
  }
  else {
    drupal_goto('cardfile/searchadd/performance/' . $form_state['values']['pid'] .
                '/artist/' . $form_state['values']['search_text'], array('prid' => $form_state['values']['prid']));
  }
}

function ums_cardfile_performance_delete_artist_confirm($form_state, $pid, $aid) {
  $performance = _ums_cardfile_get_performance($pid);
  $artist = _ums_cardfile_get_artist($aid);

  $form = array();
  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $pid,
  );
  $form['aid'] = array(
    '#type' => 'value',
    '#value' => $aid,
  );
  return confirm_form($form,
                      t('Are you sure you want to remove this artist'),
                      (isset($_GET['destination']) ? $_GET['destination'] : 'cardfile/performance/' . $pid),
                      '<h2>' . t('Are you sure you want to remove ' . $artist['name'] . ' from this performance of ' .
                                 $performance['work']['title'] . '? This action cannot be undone.') . '</h2>',
                      t('Delete'),
                      t('Cancel'));
}

function ums_cardfile_performance_delete_artist_confirm_submit($form, &$form_state) {
  db_query("DELETE FROM ums_artist_performances WHERE aid = %d AND pid = %d",
           $form_state['values']['aid'], $form_state['values']['pid']);
  drupal_set_message("Artist has been deleted");
  $form_state['redirect'] = 'cardfile/performance/' . $form_state['values']['pid'];
}

function ums_cardfile_performance_copy_artists($form_state, $pid) {
  $performance = _ums_cardfile_get_performance($pid);

  $form = array(
    '#prefix' => '<fieldset class="collapsible collapsed"><legend>Copy Performance Artists from other Repertoire</legend>',
    '#suffix' => '</fieldset>',
  );
  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $pid,
  );

  $other_pids = array();
  foreach ($performance['event']['performances'] as $other_performance) {
    if ($other_performance['pid'] != $pid) {
      $other_performance = _ums_cardfile_get_performance($other_performance['pid']);
      $description = '<strong>' . $other_performance['work']['title'] . '</strong>';
      foreach ($other_performance['artists'] as $artist) {
        $description .= '<br />' . $artist['name'] . ' (' . $artist['role'] . ')';
      }
      $other_pids[$other_performance['pid']] = $description;
    }
  }
  $form['source_pid'] = array(
    '#type' => 'radios',
    '#title' => 'Select Performance as source of Performance Artists',
    '#options' => $other_pids,
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Copy Artists',
  );

  return $form;
}

function ums_cardfile_performance_copy_artists_submit($form, $form_state) {
  $pid = $form_state['values']['pid'];
  $source_pid = $form_state['values']['source_pid'];

  // Copy all performance artists from source pid to new pid
  $res = db_query("SELECT * FROM ums_artist_performances WHERE pid = %d", $source_pid);
  while ($artist_perf = db_fetch_object($res)) {
    $artist_perf->pid = $pid;
    drupal_write_record('ums_artist_performances', $artist_perf);
  }

  drupal_set_message("Copied Repertoire Artists to the Performance");
}

function ums_cardfile_performance_delete_confirm($form_state, $pid) {
  $performance = _ums_cardfile_get_performance($pid);

  $form = array();
  $form['eid'] = array(
    '#type' => 'value',
    '#value' => $performance['eid'],
  );
  $form['pid'] = array(
    '#type' => 'value',
    '#value' => $pid,
  );
  return confirm_form($form,
                      t('Are you sure you want to remove this repertoire'),
                      (isset($_GET['destination']) ? $_GET['destination'] : 'cardfile/event/' . $performance['eid']),
                      '<h2>' . t('Are you sure you want to remove the performance of ' .
                                 $performance['work']['title'] . '? This action cannot be undone.') . '</h2>',
                      t('Delete'),
                      t('Cancel'));
}

function ums_cardfile_performance_delete_confirm_submit($form, &$form_state) {
  db_query("DELETE FROM ums_artist_performances WHERE pid = %d", $form_state['values']['pid']);
  db_query("DELETE FROM ums_performances WHERE pid = %d", $form_state['values']['pid']);
  drupal_set_message("Repertoire performance has been deleted");
  $form_state['redirect'] = 'cardfile/event/' . $form_state['values']['eid'];
}

/*== HELPER FUNCTIONS ========================================================*/
function ums_cardfile_searchadd($source_type, $source_id, $type, $search) {
  $output = '';
  if ($source_type == 'event') {
    $event = _ums_cardfile_get_event($source_id);
    $output .= '<h2>Adding repertoire to event: ' . $event['date'] . ' at ' . $event['venue'] . '</h2>';
  }
  else if ($source_type == 'performance') {
    $performance = _ums_cardfile_get_performance($source_id);
    $role = db_fetch_object(db_query('SELECT * FROM ums_performance_roles WHERE prid = %d', $_GET['prid']));
    $query_args = array('prid' => $role->prid);
    $output .= '<h2>Adding a <strong>' . $role->name . '</strong> to ' . $performance['work']['title'] . ' at event: ' .
               $performance['event']['date'] . ' at ' . $performance['event']['venue'] . '</h2>';
  }
  else if ($source_type == 'work') {
    $work = _ums_cardfile_get_work($source_id);
    $role = db_fetch_object(db_query('SELECT * FROM ums_work_roles WHERE wrid = %d', $_GET['wrid']));
    $query_args = array('wrid' => $role->wrid);
    $output .= '<h2>Adding a <strong>' . $role->name . '</strong> to ' . $work['title'] . '</h2>';
  }

  // Special Handling for copying performances from one event to another
  if (preg_match('/event:([\d]+)/', $search, $matches)) {
    $source_eid = $matches[1];
    $source_event = _ums_cardfile_get_event($source_eid);
    $output .= '<p>Copy Repertoire Performances from Event ' . $source_event['date'] . ' at ' . $source_event['venue'] . '?</p>';
    $output .= '<ul>';
    foreach($source_event['performances'] as $source_perf) {
      $output .= '<li>' . $source_perf['title'] . '</li>';
    }
    $output .= '</ul><p>' . l('COPY PERFORMANCES TO THIS EVENT', "cardfile/join/$source_type/$source_id/source_event/$source_eid") . '</p>';
  }
  else {
    // Split search string into keywords
    $search_terms = explode(' ', str_replace(',', '', $search));
    $output .= '<p>Searching for "' . implode('" AND "', $search_terms) . '"</p>';
    $search_query_parts = array();
    $search_args = array();

    if ($type == 'work') {
      $wids = array();

      foreach ($search_terms as $search_term) {
        $search_query_part = "(ums_works.title LIKE '%%%s%%'";
        $works_search_args[] = $search_term;
        $artists_search_args[] = $search_term;
        $search_query_part .= " OR ums_works.alternate LIKE '%%%s%%'";
        $works_search_args[] = $search_term;
        $artists_search_args[] = $search_term;
        $search_query_part .= " OR ums_works.notes LIKE '%%%s%%'";
        $works_search_args[] = $search_term;
        $artists_search_args[] = $search_term;

        $works_query_parts[] = $search_query_part . ')';

        $search_query_part .= " OR ums_artists.name LIKE '%%%s%%'";
        $artists_search_args[] = $search_term;
        $search_query_part .= " OR ums_artists.name_plain LIKE '%%%s%%'";
        $artists_search_args[] = $search_term;
        $search_query_part .= " OR ums_artists.alias LIKE '%%%s%%'";
        $artists_search_args[] = $search_term;
        $search_query_part .= " OR ums_artists.notes LIKE '%%%s%%')";
        $artists_search_args[] = $search_term;

        $artists_query_parts[] = $search_query_part;
      }

      $res = db_query("SELECT wid " .
                      "FROM ums_works " .
                      "WHERE " .
                      implode(' AND ', $works_query_parts) .
                      " ORDER BY wid",
                      $works_search_args);
      while ($match = db_fetch_object($res)) {
        $wids[$match->wid] = $match->wid;
      }

      $res = db_query("SELECT ums_works.wid AS wid " .
                      "FROM ums_works, ums_artist_works, ums_artists " .
                      "WHERE ums_works.wid = ums_artist_works.wid " .
                      "AND ums_artist_works.aid = ums_artists.aid " .
                      "AND " . implode(' AND ', $artists_query_parts) .
                      " ORDER BY wid",
                      $artists_search_args);
      while ($match = db_fetch_object($res)) {
        $wids[$match->wid] = $match->wid;
      }

      if (count($wids)) {
        $works = array();
        $res = db_query("SELECT ums_works.wid as wid, " .
                        "ums_works.title as title, " .
                        "ums_works.alternate as alternate, " .
                        "ums_works.notes as notes, " .
                        "ums_artists.name as artist_name, " .
                        "ums_work_roles.name AS role " .
                        "FROM ums_works " .
                        "LEFT JOIN ums_artist_works ON ums_works.wid = ums_artist_works.wid " .
                        "LEFT JOIN ums_work_roles ON ums_artist_works.wrid = ums_work_roles.wrid " .
                        "LEFT JOIN ums_artists ON ums_artist_works.aid = ums_artists.aid " .
                        "WHERE ums_works.wid IN (" .
                        implode(',', $wids) .
                        ") ORDER BY ums_works.title");

        while ($match = db_fetch_object($res)) {
          if ($works[$match->wid]) {
            // Work data already captured, just add artist info
            $works[$match->wid]['Artists'] .= "<br /><strong>$match->role:</strong> $match->artist_name";
          }
          else {
            $works[$match->wid] = array(
              'Work ID' => $match->wid,
              'Title' => $match->title,
              'Alternate' => $match->alternate,
              'Artists' => "<strong>$match->role:</strong> $match->artist_name",
              'Notes' => $match->notes,
              'SELECT' => l('SELECT', "cardfile/join/$source_type/$source_id/work/" . $match->wid),
            );
          }
        }

        $output .= theme('table', array_keys(reset($works)), $works);
        $output .= '<p><strong>- OR -</strong></p>';
      }
      else {
        $output .= '<p>No existing repertoire matches found</p>';
      }

      $output .= '<p>' . l('ADD NEW REPERTOIRE', 'cardfile/work/edit', array('query' => array('eid' => $source_id, 'title' => $search))) . '</p>';
    }
    else if ($type == 'artist') {
      foreach ($search_terms as $search_term) {
        $search_query_part = "(name LIKE '%%%s%%'";
        $search_args[] = $search_term;
        $search_query_part .= " OR name_plain LIKE '%%%s%%'";
        $search_args[] = $search_term;
        $search_query_part .= " OR alias LIKE '%%%s%%'";
        $search_args[] = $search_term;
        $search_query_part .= " OR notes LIKE '%%%s%%')";
        $search_args[] = $search_term;
        $search_query_parts[] = $search_query_part;
      }
      $res = db_query("SELECT * FROM ums_artists " .
                      "WHERE " .
                      implode(' AND ', $search_query_parts) .
                      "ORDER BY name ASC",
                      $search_args);

      $rows = array();
      while ($artist = db_fetch_array($res)) {
        $rows[] = array(
          'Artist ID' => $artist['aid'],
          'Name' => $artist['name'],
          'Alias' => $artist['alias'],
          'Notes' => $artist['notes'],
          'SELECT' => l('SELECT', "cardfile/join/$source_type/$source_id/artist/" . $artist['aid'],
                        array('query' => $query_args)),
        );
      }
      $output .= theme('table', array_keys($rows[0]), $rows);
      $output .= '<p><strong>- OR -</strong></p>';
      if ($source_type == 'performance') {
        $source_id_name = 'pid';
      }
      else if ($source_type == 'work') {
        $source_id_name = 'wid';
      }
      $output .= '<p>' . l('ADD NEW ARTIST', 'cardfile/artist/edit', array('query' => array($source_id_name => $source_id, 'name' => $search))) . '</p>';
    }
  }
  return $output;
}

function ums_cardfile_join($type1, $id1, $type2, $id2) {
  if ($type1 == 'event' && $type2 == 'source_event') {
    // Copy all performances from source_event to event
    $res = db_query("SELECT * FROM ums_performances WHERE eid = %d", $id2);
    while ($copy_perf = db_fetch_object($res)) {
      $copy_pid = $copy_perf->pid;
      unset($copy_perf->pid);
      $copy_perf->eid = $id1;
      drupal_write_record('ums_performances', $copy_perf);
      $res2 = db_query("SELECT * FROM ums_artist_performances WHERE pid = %d", $copy_pid);
      while ($copy_artist_perf = db_fetch_object($res2)) {
        $copy_artist_perf->pid = $copy_perf->pid;
        drupal_write_record('ums_artist_performances', $copy_artist_perf);
      }
    }
    drupal_set_message("All Performances copied from event $id2 to event $id1");
    drupal_goto('cardfile/event/' . $id1);
  }
  if ($type1 == 'event' && $type2 == 'work') {
    // New Performance
    $max = db_fetch_object(db_query("SELECT MAX(weight) as max_weight FROM ums_performances WHERE eid = %d", $id1));
    $perf = new stdClass;
    $perf->eid = $id1;
    $perf->wid = $id2;
    $perf->weight = $max->max_weight + 1;
    drupal_write_record('ums_performances', $perf);
    drupal_set_message('Created new Repertoire Performance for Event ID: ' . $id1 .
                       '<br />Add Artist Info below:');
    drupal_goto('cardfile/performance/' . $perf->pid);
  }
  else if ($type1 == 'performance' && $type2 == 'artist') {
    $artist_perf = new stdClass;
    $artist_perf->pid = $id1;
    $artist_perf->aid = $id2;
    $artist_perf->prid = $_GET['prid'];
    drupal_write_record('ums_artist_performances', $artist_perf);
    drupal_set_message("Added new Repertoire Artist to the Performance");
    ums_cardfile_recent_artists($id2);
    drupal_goto('cardfile/performance/' . $artist_perf->pid);
  }
  else if ($type1 == 'work' && $type2 == 'artist') {
    $artist_work = new stdClass;
    $artist_work->wid = $id1;
    $artist_work->aid = $id2;
    $artist_work->wrid = $_GET['wrid'];
    drupal_write_record('ums_artist_works', $artist_work);
    drupal_set_message("Added new Creator to the Repertoire");
    ums_cardfile_recent_artists($id2);
    drupal_goto('cardfile/work/' . $artist_work->wid);
  }
}

function ums_cardfile_autocomplete($type) {
  $search = strtolower($_GET['search']);
  if ($type == 'artist') {
    $res = db_query("SELECT * FROM ums_artists " .
                    "WHERE name LIKE '%%%s%%' " .
                    "OR name_plain LIKE '%%%s%%' " .
                    "OR alias LIKE '%%%s%%' " .
                    "ORDER BY name ASC LIMIT 25",
                    $search, $search, $search);
    while ($match = db_fetch_array($res)) {
      echo $match['name'] . ' (aid:' . $match['aid'] . ")\n";
    }
  }
  else if ($type == 'event') {
    $res = db_query("SELECT * FROM ums_events " .
                    "WHERE date LIKE '%%%s%%' " .
                    "ORDER BY date ASC LIMIT 25",
                    $search);
    while ($match = db_fetch_array($res)) {
      $match_event = _ums_cardfile_get_event($match['eid']);
      echo $match_event['date'] . ' at ' . $match_event['venue'] . ' (eid:' . $match['eid'] . ")\n";
    }
  }
  else if ($type == 'work') {
    $res = db_query("SELECT * FROM ums_works " .
                    "WHERE title LIKE '%%%s%%' " .
                    "OR alternate LIKE '%%%s%%' " .
                    "OR notes LIKE '%%%s%%' " .
                    "ORDER BY title ASC LIMIT 25",
                    $search, $search, $search);
    while ($match = db_fetch_array($res)) {
      echo $match['title'] . ' (wid:' . $match['wid'] . ")\n";
    }
  }
}

function ums_cardfile_recent_artists($new_aid = 0) {
  global $user;
  $artists = array();

  $var_key = 'ums_cardfile_recent_artists_' . $user->uid;

  $res = db_query('SELECT value FROM variable WHERE name = "%s"', $var_key);
  $row = db_fetch_object($res);
  if ($row->value) {
    $artists = unserialize($row->value);
    $existing_list = TRUE;
  }

  if ($new_aid) {
    // If already in the list, remove it
    if ($artists[$new_aid]) {
      $artist_name = $artists[$new_aid];
      unset($artists[$new_aid]);
    }
    else {
      $row = db_fetch_object(db_query("SELECT name FROM ums_artists WHERE aid = %d", $new_aid));
      $artist_name = $row->name;
    }

    // Add to the beginning of the list
    $artists = array_reverse($artists, TRUE);
    $artists[$new_aid] = $artist_name;
    $artists = array_reverse($artists, TRUE);

    // If > 20 elements, pop the last one off the list
    if (count($artists) > 20) {
      array_pop($artists);
    }

    // Store updated list
    if ($existing_list) {
      db_query('UPDATE variable SET value = "%s" WHERE name = "%s"',
               serialize($artists), $var_key);
    }
    else {
      db_query('INSERT INTO variable (name, value) VALUES ("%s", "%s")',
               $var_key, serialize($artists));
    }
  }

  return $artists;
}

function ums_cardfile_normalize($string){
    $a = 'ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõöøùúûýýþÿŔŕ';
    $b = 'AAAAAAACEEEEIIIIDNOOOOOOUUUUYBSaaaaaaaceeeeiiiidnoooooouuuyybyRr';
    $string = utf8_decode($string);
    $string = strtr($string, utf8_decode($a), $b);
    return utf8_encode($string);
}
